<?php

/**
 * 	Dear developer!
 *	Never modify events.php file, it is autogenerated.
 *  Modify PHP/EventTemplates/events.txt instead.
 *
 */

 class eventclass_activar_vacancia  extends eventsBase
{
	function __construct()
	{
	// fill list of events
		$this->events["BeforeAdd"]=true;

		$this->events["CustomAdd"]=true;

		$this->events["ProcessValuesAdd"]=true;

		$this->events["BeforeShowAdd"]=true;


		$this->events["BeforeEdit"]=true;

		$this->events["CustomEdit"]=true;

		$this->events["ProcessValuesEdit"]=true;

		$this->events["BeforeShowEdit"]=true;



	}

//	handlers

		
		
		
		
		
		
		
		
		
		
		
		
		
				// Before record added
function BeforeAdd(&$values, &$sqlValues, &$message, $inline, $pageObject)
{

		//insertar nuevos ids si son detectados en requisitos, se detectan por sus ids no son numericos
$id_requisitos_multi_todos = explode(",",$_REQUEST["valores_multi_requisitos_todos"]);

$id_valores_multi_habilidades_conocimiento_todos = explode(",",$_REQUEST["valores_multi_habilidades_conocimiento_todos"]);

$id_puesto_todos = explode(",",$_REQUEST["valores_multi_ocupacion_puesto_todos"]);

$rray_nuevos_requisitos_id= [];

$rray_nuevos_habilidades_id= [];

$rray_nuevos_puesto_id= [];


//aqui empieza proceso de puestos nuevos

/*
foreach ($id_puesto_todos as  $valuetoinsert4)
      {
		   if (!is_numeric($valuetoinsert4)){
					 $sqlinsert4 = DB::PrepareSQL("INSERT INTO 
																							bolsa_empleo.ocupacion_puesto_clasificaciones(descripcion) 
																						values 
																							(':1') 
																						ON CONFLICT ON CONSTRAINT 
																									ocupacion_puesto_clasificaciones_descripcion_key 
																							DO UPDATE SET descripcion = excluded.descripcion  
																							RETURNING id_ocu_puest_clasi",$valuetoinsert4);
							$rx4=DB::Query($sqlinsert4);
							$row4 = $rx4->fetchAssoc(); 
							$new_puestos_nuevos = $row4['id_ocu_puest_clasi'];
					  array_push($rray_nuevos_puesto_id, $new_puestos_nuevos);
				  }			
     }

  //crear el array con los posibles id ya existentes

foreach ($id_puesto_todos as  $valuetoinsert5)
      {

		if (is_numeric($valuetoinsert5)){

       
       array_push($rray_nuevos_puesto_id, $valuetoinsert5);

     }
			
     }

*/

//proceso de requisitos
	foreach ($id_requisitos_multi_todos as  $valuetoinsert)
      {

		if (!is_numeric($valuetoinsert)){

       $sqlinsert = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_requisitos_excluyentes(descripcion) values 
				(':1') ON CONFLICT ON CONSTRAINT vacancia_requisitos_excluyentes_descripcion_key DO UPDATE SET descripcion = excluded.descripcion  RETURNING id_requisitos_vacancia",$valuetoinsert);
				$rx=DB::Query($sqlinsert);
				$row = $rx->fetchAssoc(); 
				$new_id_requisitos_nuevos = $row['id_requisitos_vacancia'];
        array_push($rray_nuevos_requisitos_id, $new_id_requisitos_nuevos);

     }
			
     }

  //crear el array con los posibles id ya existentes

foreach ($id_requisitos_multi_todos as  $valuetoinsert)
      {

		if (is_numeric($valuetoinsert)){

       
       array_push($rray_nuevos_requisitos_id, $valuetoinsert);

     }
			
     }


//aqui empieza procesamiento de habilidades

foreach ($id_valores_multi_habilidades_conocimiento_todos as  $valuetoinsert2)
      {

		if (!is_numeric($valuetoinsert2)){

       $sqlinsert2 = DB::PrepareSQL("INSERT INTO bolsa_empleo.habilidades(descripcion) values 
				(':1') ON CONFLICT ON CONSTRAINT habilidades_descripcion_key DO UPDATE SET descripcion = excluded.descripcion  RETURNING id_habilidad",$valuetoinsert2);
				$rx2=DB::Query($sqlinsert2);
				$row2 = $rx2->fetchAssoc(); 
				$new_id_habilidades_nuevos = $row2['id_habilidad'];
       array_push($rray_nuevos_habilidades_id, $new_id_habilidades_nuevos);

     }
			
     }

  //crear el array con los posibles id ya existentes

foreach ($id_valores_multi_habilidades_conocimiento_todos as  $valuetoinsert3)
      {

		if (is_numeric($valuetoinsert3)){

       
       array_push($rray_nuevos_habilidades_id, $valuetoinsert3);

     }
			
     }




//$values["fk_ocupacion_puesto"]= implode(',', $rray_nuevos_puesto_id); 
$values["requisitos_exclu_formacion"]= implode(',', $rray_nuevos_requisitos_id); 

$values["habilidades_conocimiento"]= implode(',', $rray_nuevos_habilidades_id); 



$values["salario_final"] = str_replace('.', '', $values["salario_final"]);

$values["id_formacion_academica"]=ucfirst($values["id_formacion_academica"]);
$values["tipo_movilidad"]=ucfirst($values["tipo_movilidad"]);




$values["descripcion_puesto"]=ucfirst($values["descripcion_puesto"]);
$values["requisitos_exclu_formacion"]=ucfirst($values["requisitos_exclu_formacion"]);
$values["habilidades_conocimiento"]=ucfirst($values["habilidades_conocimiento"]);

return true;
;		
} // function BeforeAdd

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Custom add
function CustomAdd(&$values, &$keys, &$error, $inline, $pageObject)
{

		

//// insertar vacancia 
$vacancia = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia
					(fecha_creacion_vacancia,
						id_estado_vacancia,
						fecha_expiracion_vacancia,
						cantidad_vacancia) 
					values (':1',':2',':3',':4')RETURNING id_vacancias;",
					now(),
					2,
					$values["fecha_expiracion_vacancia"],
					$values["cantidad_vacancia"]);
$rx=DB::Query($vacancia);
$row = $rx->fetchAssoc(); 
$new_id_vacancias = $row['id_vacancias'];

$_SESSION['postid_vacancias']=$new_id_vacancias ;

////insertar puesto
function debug_to_console($data, $context = 'Debug in Console') {

    // Buffering to solve problems frameworks, like header() in this and not a solid return.
    ob_start();

    $output  = 'console.info(\'' . $context . ':\');';
    $output .= 'console.log(' . json_encode($data) . ');';
    $output  = sprintf('<script>%s</script>', $output);

    echo $output;
}

	
$puesto = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_puesto
					(fk_ocupacion_puesto,
						salario,
						tipo_contrato,
						descripcion_puesto,
						id_vacancia,
						id_rubro,
						anos_experiencia_vacancia,
						meses_experiencia_vacancia,
						horario_rotativo,
						modalidad_trabajo,
						descripcion_salario) 
					values (':1',':2',':3',':4',':5',':6',':7',':8',':9',':10',':11')RETURNING id_puesto_vacancia;",
					$values["fk_ocupacion_puesto"],
					$values["salario_final"],
					$values["tipo_contrato"],
					$values["descripcion_puesto"],
				$new_id_vacancias,
					$values["id_rubro"],
					$values["anos_experiencia_vacancia"],
					$values["meses_experiencia_vacancia"],
					$values["horario_rotativo"],
					$values["modalidad_trabajo"],
					$values["salario_descripcion"]);

$rxpuesto=DB::Query($puesto);
$rowpuesto = $rxpuesto->fetchAssoc(); 
$new_id_puesto = $rowpuesto['id_puesto_vacancia'];

debug_to_console($puesto);

$empresa = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_empresa
					(id_empresa_sucursal,
					id_contacto_sucursal,
					id_cidudad,
					id_departamento,
					id_vacancia) 
					values (':1',':2',':3',':4',':5')RETURNING id_empresa_vacancia;",
					$values["id_empresa_sucursal"],
					$values["id_contacto_sucursal"],
					$values["id_cidudad"],
					$values["id_departamento"],
				$new_id_vacancias);
			$rxempresa=DB::Query($empresa);
$rowempresa = $rxempresa->fetchAssoc(); 
$new_id_empresa = $rowempresa['id_empresa_vacancia'];

/////insertar requisito

debug_to_console($empresa);


$requisitos = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_requisito
					(genero,
						movilidad_propia,
						tipo_movilidad,
						id_registro_conducir,
						discapacidad_aceptada,
						id_vacancia,
						nacionalidad,
						edad,
					requisitos_exclu_formacion,
					habilidades_conocimiento,
					id_formacion_academica) 
					values (':1',':2',':3',':4',':5',':6',':7',':8',':9',':10',':11')RETURNING id_vacancia_requisito;",
					$values["genero"],
					$values["movilidad_propia"],
					$values["tipo_movilidad"],
					$values["id_registro_conducir"],
					$values["discapacidad_aceptada"],
			$new_id_vacancias,
			$values["nacionalidad"],
					"[".$values["edad_rango_bajo"]."-".$values['edad_rango_alto']."]",		
				$values["requisitos_exclu_formacion"],
					$values["habilidades_conocimiento"],
					$values["id_formacion_academica"]);
					$rxx=DB::Query($requisitos);
						$roww = $rxx->fetchAssoc(); 
						$new_id_vacancia_requisito = $roww['id_vacancia_requisito'];

debug_to_console($requisitos);
$tipo_movilidad = explode(",",$values["tipo_movilidad"]);


      foreach ($tipo_movilidad as  $value)
      {
$movilidad = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_detalle_movilidad
					(id_tipo_movilidad,
					id_vacancia_requisito,
					movilidad_propia) 
					values (':1',':2',':3')",
					$value,
					$new_id_vacancia_requisito,
					$values["movilidad_propia"]);
					DB::Exec($movilidad); 
}
debug_to_console($movilidad);
$registro_conducir = explode(",",$values["id_registro_conducir"]);


      foreach ($registro_conducir as  $value_regi)
      {
$registro_conducir_vaca = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_detalle_registro_conducir
					(id_vacancia_requisitos,
						id_tipo_registro_conducir) 
					values (':1',':2')",
					$new_id_vacancia_requisito,
					$value_regi
					);
					DB::Exec($registro_conducir_vaca); 
}
debug_to_console($registro_conducir_vaca);
$vacancia_discapa_aceptada = explode(",",$values["discapacidad_aceptada"]);


      foreach ($vacancia_discapa_aceptada as  $value1)
      {
$discapacidad = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_discapa_aceptada
					(id_discapacidad_vacancia,
						id_vacancia_requisito) 
					values (':1',':2')",
					$value1,
					$new_id_vacancia_requisito);
					DB::Exec($discapacidad); 
debug_to_console($discapacidad);
}


$vacancia_requisito_excluyente_detalle = explode(",",$values["requisitos_exclu_formacion"]);


      foreach ($vacancia_requisito_excluyente_detalle as  $value4)
      {
$requisitos_exclu_formacion = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_requisito_excluyente_detalle
					(id_vacancia_requisito,
						id_requisito_excluyente) 
					values (':1',':2')",
					$new_id_vacancia_requisito,
						$value4);
					DB::Exec($requisitos_exclu_formacion); 
}

$vacancia_habilidad_conocimiento = explode(",",$values["habilidades_conocimiento"]);


      foreach ($vacancia_habilidad_conocimiento as  $value5)
      {
$habilidades_conocimiento = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_habilidad_conocimiento
					(	id_habilidad,
						id_vacancia_requisito
					) 
					values (':1',':2')",
					$value5,$new_id_vacancia_requisito);
					DB::Exec($habilidades_conocimiento); 
}


$vacancia_formacion_academica_detalle = explode(",",$values["id_formacion_academica"]);


      foreach ($vacancia_formacion_academica_detalle as  $value6)
      {
$formacion_academica = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_formacion_academica_detalle
					(id_formacion_vacancia,
						id_vacancia_requisito) 
					values (':1',':2')",
					$value6,
					$new_id_vacancia_requisito);
					DB::Exec($formacion_academica); 
}


$strSQLExistscambio = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_cambio_estado
					(id_vacancia,
						estado_vacancia,
						fecha_cambio,
						estado_anterior,
						usuario) 
					values (':1',':2',':3',':4',':5');",
						$new_id_vacancias,
					1,
					 now(),
					0,);
				
			DB::Exec($strSQLExistscambio);



if ( $row['id_vacancias']>0 && $rowpuesto['id_puesto_vacancia']>0  && $rowempresa['id_empresa_vacancia']>0  && $roww['id_vacancia_requisito']>0 ){


return false;
}
else {

$pageObject->setMessage("LA VACANCIA NO FUE AÑADIDA ");

$vacancia_requisito_idioma_eliminar = DB::PrepareSQL("delete from bolsa_empleo.vacancia_requisito_idioma
 where bolsa_empleo.vacancia_requisito_idioma.id_vacancia =':1'",
$row['id_vacancias']);
DB::Exec($vacancia_requisito_idioma_eliminar);
                                                                                          

$vacancia_requisito_programa_eliminar = DB::PrepareSQL("delete from bolsa_empleo.vacancia_requisito_programa
 where bolsa_empleo.vacancia_requisito_programa.fk_id_vacancia =':1'",
$row['id_vacancias']);
DB::Exec($vacancia_requisito_programa_eliminar);
                                           


$vacancia_dias_horas_eliminar = DB::PrepareSQL("delete from bolsa_empleo.vacancia_dias_horas
 where bolsa_empleo.vacancia_dias_horas.id_vacancias=':1'",
$row['id_vacancias']);
DB::Exec($vacancia_dias_horas_eliminar);


$vacancia_puesto_eliminar = DB::PrepareSQL("delete from bolsa_empleo.vacancia_puesto
 where bolsa_empleo.vacancia_puesto.id_vacancia=':1'",
$row['id_vacancias']);
DB::Exec($vacancia_puesto_eliminar);


$eliminar_discapa = DB::PrepareSQL("delete from bolsa_empleo.vacancia_discapa_aceptada
 where bolsa_empleo.vacancia_discapa_aceptada.id_vacancia_requisito =':1'",
$roww['id_vacancia_requisito']);
									DB::Exec($eliminar_discapa);



$eliminar_requisito = DB::PrepareSQL("delete from bolsa_empleo.vacancia_requisito_excluyente_detalle
 where bolsa_empleo.vacancia_requisito_excluyente_detalle.id_vacancia_requisito =':1'",
$roww['id_vacancia_requisito']);
									DB::Exec($eliminar_requisito);


$eliminar_habilidad = DB::PrepareSQL("delete from bolsa_empleo.vacancia_habilidad_conocimiento
 where bolsa_empleo.vacancia_habilidad_conocimiento.id_vacancia_requisito =':1'",
$roww['id_vacancia_requisito']);
									DB::Exec($eliminar_habilidad);

$eliminar_vacancia_detalle_movilidad = DB::PrepareSQL("delete from bolsa_empleo.vacancia_detalle_movilidad
 where bolsa_empleo.vacancia_detalle_movilidad.id_vacancia_requisito =':1'",
$roww['id_vacancia_requisito']);
									DB::Exec($eliminar_vacancia_detalle_movilidad);


$eliminar_vacancia_detalle_registro_conducir= DB::PrepareSQL("delete from bolsa_empleo.vacancia_detalle_registro_conducir
 where  bolsa_empleo.vacancia_detalle_registro_conducir.id_vacancia_requisitos=':1'",
$roww['id_vacancia_requisito']);
									DB::Exec($eliminar_vacancia_detalle_registro_conducir);

$eliminar_vacancia_formacion_academica_detalle= DB::PrepareSQL("delete from bolsa_empleo.vacancia_formacion_academica_detalle
 where bolsa_empleo.vacancia_formacion_academica_detalle.id_vacancia_requisito =':1'",$roww['id_vacancia_requisito']);
									DB::Exec($eliminar_vacancia_formacion_academica_detalle);

$vacancia_requisito_eliminar = DB::PrepareSQL("delete from bolsa_empleo.vacancia_requisito
 where bolsa_empleo.vacancia_requisito.id_vacancia =':1'",
$row['id_vacancias']);
DB::Exec($vacancia_requisito_eliminar);

$vacanciaeliminar = DB::PrepareSQL("delete from bolsa_empleo.vacancia
 where id_vacancias =':1'",
$row['id_vacancias']);
DB::Exec($vacanciaeliminar);



return false;

}



;		
} // function CustomAdd

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Process record values
function ProcessValuesAdd(&$values, $pageObject)
{

		//Empresa sucursal
$rs_es = DB::Select("bolsa_empleo.empresas_bolsa_sucursales", "id_tipo_sucursal=1 and ruc='".$_SESSION["UserID"]."'" );
while( $record_es= $rs_es->fetchAssoc() )
{
		 $values['id_empresa_sucursal']= $record_es["id"];
		 $values['id_cidudad']= $record_es["city_id"];
		 $values['id_departamento']= $record_es["distrito_id"];
    }


//empresas
$rs_e = DB::Select("bolsa_empleo.empresas_bolsa", "ruc='".$_SESSION["UserID"]."'" );
while( $record_e = $rs_e->fetchAssoc() )
{
		 $values['id_rubro']= $record_e["id_rubro"];
    }
;		
} // function ProcessValuesAdd

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Before display
function BeforeShowAdd(&$xt, &$templatefile, $pageObject)
{

		
  
$pageObject->setProxyValue("vacancia_dias", $_SESSION["vacancia_dias"]);


;		
} // function BeforeShowAdd

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Before record updated
function BeforeEdit(&$values, &$sqlValues, $where, &$oldvalues, &$keys, &$message, $inline, $pageObject)
{

		//insertar nuevos ids si son detectados en requisitos, se detectan por sus ids no son numericos
$id_requisitos_multi_todos = explode(",",$_REQUEST["valores_multi_requisitos_todos"]);

$id_valores_multi_habilidades_conocimiento_todos = explode(",",$_REQUEST["valores_multi_habilidades_conocimiento_todos"]);

$id_puesto_todos = explode(",",$_REQUEST["valores_multi_ocupacion_puesto_todos"]);

$rray_nuevos_requisitos_id= [];

$rray_nuevos_habilidades_id= [];

$rray_nuevos_puesto_id= [];


//aqui empieza proceso de puestos nuevos

/*
foreach ($id_puesto_todos as  $valuetoinsert4)
      {
		   if (!is_numeric($valuetoinsert4)){
					 $sqlinsert4 = DB::PrepareSQL("INSERT INTO 
																							bolsa_empleo.ocupacion_puesto_clasificaciones(descripcion) 
																						values 
																							(':1') 
																						ON CONFLICT ON CONSTRAINT 
																									ocupacion_puesto_clasificaciones_descripcion_key 
																							DO UPDATE SET descripcion = excluded.descripcion  
																							RETURNING id_ocu_puest_clasi",$valuetoinsert4);
							$rx4=DB::Query($sqlinsert4);
							$row4 = $rx4->fetchAssoc(); 
							$new_puestos_nuevos = $row4['id_ocu_puest_clasi'];
					  array_push($rray_nuevos_puesto_id, $new_puestos_nuevos);
				  }			
     }

  //crear el array con los posibles id ya existentes

foreach ($id_puesto_todos as  $valuetoinsert5)
      {

		if (is_numeric($valuetoinsert5)){

       
       array_push($rray_nuevos_puesto_id, $valuetoinsert5);

     }
			
     }

*/

//proceso de requisitos
	foreach ($id_requisitos_multi_todos as  $valuetoinsert)
      {

		if (!is_numeric($valuetoinsert)){

       $sqlinsert = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_requisitos_excluyentes(descripcion) values 
				(':1') ON CONFLICT ON CONSTRAINT vacancia_requisitos_excluyentes_descripcion_key DO UPDATE SET descripcion = excluded.descripcion  RETURNING id_requisitos_vacancia",$valuetoinsert);
				$rx=DB::Query($sqlinsert);
				$row = $rx->fetchAssoc(); 
				$new_id_requisitos_nuevos = $row['id_requisitos_vacancia'];
        array_push($rray_nuevos_requisitos_id, $new_id_requisitos_nuevos);

     }
			
     }

  //crear el array con los posibles id ya existentes

foreach ($id_requisitos_multi_todos as  $valuetoinsert)
      {

		if (is_numeric($valuetoinsert)){

       
       array_push($rray_nuevos_requisitos_id, $valuetoinsert);

     }
			
     }


//aqui empieza procesamiento de habilidades

foreach ($id_valores_multi_habilidades_conocimiento_todos as  $valuetoinsert2)
      {

		if (!is_numeric($valuetoinsert2)){

       $sqlinsert2 = DB::PrepareSQL("INSERT INTO bolsa_empleo.habilidades(descripcion) values 
				(':1') ON CONFLICT ON CONSTRAINT habilidades_descripcion_key DO UPDATE SET descripcion = excluded.descripcion  RETURNING id_habilidad",$valuetoinsert2);
				$rx2=DB::Query($sqlinsert2);
				$row2 = $rx2->fetchAssoc(); 
				$new_id_habilidades_nuevos = $row2['id_habilidad'];
       array_push($rray_nuevos_habilidades_id, $new_id_habilidades_nuevos);

     }
			
     }

  //crear el array con los posibles id ya existentes

foreach ($id_valores_multi_habilidades_conocimiento_todos as  $valuetoinsert3)
      {

		if (is_numeric($valuetoinsert3)){

       
       array_push($rray_nuevos_habilidades_id, $valuetoinsert3);

     }
			
     }




//$values["fk_ocupacion_puesto"]= implode(',', $rray_nuevos_puesto_id); 
$values["requisitos_exclu_formacion"]= implode(',', $rray_nuevos_requisitos_id); 

$values["habilidades_conocimiento"]= implode(',', $rray_nuevos_habilidades_id); 



$values["salario_final"] = str_replace('.', '', $values["salario_final"]);

$values["id_formacion_academica"]=ucfirst($values["id_formacion_academica"]);
$values["tipo_movilidad"]=ucfirst($values["tipo_movilidad"]);




$values["descripcion_puesto"]=ucfirst($values["descripcion_puesto"]);
$values["requisitos_exclu_formacion"]=ucfirst($values["requisitos_exclu_formacion"]);
$values["habilidades_conocimiento"]=ucfirst($values["habilidades_conocimiento"]);

return true;
;		
} // function BeforeEdit

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Custom record update
function CustomEdit(&$values, $where, &$oldvalues, &$keys, &$error, $inline, $pageObject)
{

		function debug_to_console($data, $context = 'Debug in Console') {

    // Buffering to solve problems frameworks, like header() in this and not a solid return.
    ob_start();

    $output  = 'console.info(\'' . $context . ':\');';
    $output .= 'console.log(' . json_encode($data) . ');';
    $output  = sprintf('<script>%s</script>', $output);

    echo $output;
}



$vacancia = DB::PrepareSQL("update bolsa_empleo.vacancia 
set 	fecha_expiracion_vacancia= ':1',
						cantidad_vacancia= ':2'
	where id_vacancias = ':3'",
					$values["fecha_expiracion_vacancia"],
					$values["cantidad_vacancia"], 
						$values["id_vacancias"]);

DB::Exec($vacancia);

$puesto = DB::PrepareSQL("update bolsa_empleo.vacancia_puesto 
set 
fk_ocupacion_puesto = ':1',
salario = ':2',
tipo_contrato = ':3',
 descripcion_puesto = ':4',
 id_rubro = ':5',
 anos_experiencia_vacancia = ':6',
 meses_experiencia_vacancia = ':7',
horario_rotativo= ':8',
modalidad_trabajo= ':9',
descripcion_salario= ':10'
 where id_vacancia = ':11'",
					$values["fk_ocupacion_puesto"],
					$values["salario_final"],
					$values["tipo_contrato"],
					$values["descripcion_puesto"],
					$values["id_rubro"],
					$values["anos_experiencia_vacancia"],
					$values["meses_experiencia_vacancia"],
					$values["horario_rotativo"],
					$values["modalidad_trabajo"],
					$values["salario_descripcion"],
					$values["id_vacancias"]);

DB::Exec($puesto);

$empresa = DB::PrepareSQL("update bolsa_empleo.vacancia_empresa 
set 
id_empresa_sucursal = ':1',
id_contacto_sucursal = ':2',
id_cidudad = ':3',
 id_departamento = ':4' 
where id_vacancia = ':5'",
				$values["id_empresa_sucursal"],
					$values["id_contacto_sucursal"],
					$values["id_cidudad"],
					$values["id_departamento"],
				$values["id_vacancias"]);

DB::Exec($empresa);






$vacancia_requisito = DB::PrepareSQL("update bolsa_empleo.vacancia_requisito 
set genero = ':1',
movilidad_propia = ':2',
tipo_movilidad	= ':3', 
id_registro_conducir = ':4', 
discapacidad_aceptada = ':5', 
nacionalidad = ':6', 
edad = ':7', 
requisitos_exclu_formacion = ':8', 
habilidades_conocimiento = ':9',
id_formacion_academica = ':10' 
where id_vacancia = ':11'",
					$values["genero"],
					$values["movilidad_propia"],
					$values["tipo_movilidad"],
					$values["id_registro_conducir"],
					$values["discapacidad_aceptada"],
					$values["nacionalidad"],
					"[".$values["edad_rango_bajo"]."-".$values['edad_rango_alto']."]",		
					$values["requisitos_exclu_formacion"],
					$values["habilidades_conocimiento"],
					$values["id_formacion_academica"],
					$values["id_vacancias"]
	);

DB::Exec($vacancia_requisito);



$consulta_requisitos = DB::PrepareSQL("SELECT
bolsa_empleo.vacancia_requisito.id_vacancia_requisito
FROM
bolsa_empleo.vacancia_requisito
WHERE
bolsa_empleo.vacancia_requisito.id_vacancia =  ':1' limit 1", 		$values["id_vacancias"] );
$consulta_requi_eli1 = DB::Query($consulta_requisitos);
$consulta_requi_eli=$consulta_requi_eli1->fetchAssoc();

$eliminar_discapa = DB::PrepareSQL("delete from bolsa_empleo.vacancia_discapa_aceptada
 where bolsa_empleo.vacancia_discapa_aceptada.id_vacancia_requisito =':1'",
$consulta_requi_eli['id_vacancia_requisito']);
									DB::Exec($eliminar_discapa);



$eliminar_requisito = DB::PrepareSQL("delete from bolsa_empleo.vacancia_requisito_excluyente_detalle
 where bolsa_empleo.vacancia_requisito_excluyente_detalle.id_vacancia_requisito =':1'",
$consulta_requi_eli['id_vacancia_requisito']);
									DB::Exec($eliminar_requisito);


$eliminar_habilidad = DB::PrepareSQL("delete from bolsa_empleo.vacancia_habilidad_conocimiento
 where bolsa_empleo.vacancia_habilidad_conocimiento.id_vacancia_requisito =':1'",
$consulta_requi_eli['id_vacancia_requisito']);
									DB::Exec($eliminar_habilidad);

$eliminar_vacancia_detalle_movilidad = DB::PrepareSQL("delete from bolsa_empleo.vacancia_detalle_movilidad
 where bolsa_empleo.vacancia_detalle_movilidad.id_vacancia_requisito =':1'",
$consulta_requi_eli['id_vacancia_requisito']);
									DB::Exec($eliminar_vacancia_detalle_movilidad);





$eliminar_vacancia_detalle_registro_conducir= DB::PrepareSQL("delete from bolsa_empleo.vacancia_detalle_registro_conducir
 where  bolsa_empleo.vacancia_detalle_registro_conducir.id_vacancia_requisitos=':1'",
$consulta_requi_eli['id_vacancia_requisito']);
									DB::Exec($eliminar_vacancia_detalle_registro_conducir);

$eliminar_vacancia_formacion_academica_detalle= DB::PrepareSQL("delete from bolsa_empleo.vacancia_formacion_academica_detalle
 where bolsa_empleo.vacancia_formacion_academica_detalle.id_vacancia_requisito =':1'",$consulta_requi_eli['id_vacancia_requisito']);
									DB::Exec($eliminar_vacancia_formacion_academica_detalle);


$vacancia_discapa_aceptada = explode(",",$values["discapacidad_aceptada"]);


      foreach ($vacancia_discapa_aceptada as  $value1)
      {
$discapacidad = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_discapa_aceptada
					(id_discapacidad_vacancia,
						id_vacancia_requisito) 
					values (':1',':2')",
					$value1,
					$consulta_requi_eli['id_vacancia_requisito']);
					DB::Exec($discapacidad); 
}



$tipo_movilidad = explode(",",$values["tipo_movilidad"]);


      foreach ($tipo_movilidad as  $value)
      {
$movilidad = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_detalle_movilidad
					(id_tipo_movilidad,
					id_vacancia_requisito,
					id_registro_de_conducir,
					movilidad_propia) 
					values (':1',':2',':3',':4')",
					$value,
					$new_id_vacancia_requisito,
					$values["id_registro_conducir"],
					$values["movilidad_propia"]);
					DB::Exec($movilidad); 
}





$vacancia_requisito_excluyente_detalle = explode(",",$values["requisitos_exclu_formacion"]);


      foreach ($vacancia_requisito_excluyente_detalle as  $value4)
      {
$requisitos_exclu_formacion = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_requisito_excluyente_detalle
					(id_vacancia_requisito,
						id_requisito_excluyente) 
					values (':1',':2')",
				$consulta_requi_eli['id_vacancia_requisito'],
						$value4);
					DB::Exec($requisitos_exclu_formacion); 
}

$vacancia_habilidad_conocimiento = explode(",",$values["habilidades_conocimiento"]);


      foreach ($vacancia_habilidad_conocimiento as  $value5)
      {
$habilidades_conocimiento = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_habilidad_conocimiento
					(	id_habilidad,
						id_vacancia_requisito
					) 
					values (':1',':2')",
					$value5,$consulta_requi_eli['id_vacancia_requisito']);
					DB::Exec($habilidades_conocimiento); 
}




$vacancia_formacion_academica_detalle = explode(",",$values["id_formacion_academica"]);


      foreach ($vacancia_formacion_academica_detalle as  $value6)
      {
$formacion_academica = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_formacion_academica_detalle
					(id_formacion_vacancia,
						id_vacancia_requisito) 
					values (':1',':2')",
					$value6,
					$consulta_requi_eli['id_vacancia_requisito']);
					DB::Exec($formacion_academica); 
}




$registro_conducir = explode(",",$values["id_registro_conducir"]);


      foreach ($registro_conducir as  $value_regi)
      {
$registro_conducir_vaca = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_detalle_registro_conducir
					(id_vacancia_requisitos,
						id_tipo_registro_conducir) 
					values (':1',':2')",
					$consulta_requi_eli['id_vacancia_requisito'],
					$value_regi
					);
					DB::Exec($registro_conducir_vaca); 
}

return false;
;		
} // function CustomEdit

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Process record values
function ProcessValuesEdit(&$values, $pageObject)
{

		//Empresa sucursal
/*$rs_es = DB::Select("bolsa_empleo.empresas_bolsa_sucursales", "id_tipo_sucursal=1 and ruc='".$_SESSION["UserID"]."'" );
while( $record_es= $rs_es->fetchAssoc() )
{
		 $values['id_empresa_sucursal']= $record_es["id"];
		 $values['id_cidudad']= $record_es["city_id"];
		 $values['id_departamento']= $record_es["distrito_id"];
    }


//empresas
$rs_e = DB::Select("bolsa_empleo.empresas_bolsa", "ruc='".$_SESSION["UserID"]."'" );
while( $record_e = $rs_e->fetchAssoc() )
{
		 $values['id_rubro']= $record_e["id_rubro"];
    }*/

$_SESSION['postid_vacancias']=$values['id_vacancias'] ;

 $strSQLExists5 = DB::PrepareSQL("
  SELECT
bolsa_empleo.vista_edades_desglosado.fk_ocupacion_puesto,
bolsa_empleo.vista_edades_desglosado.descripcion_salario,
bolsa_empleo.vista_edades_desglosado.salario,
bolsa_empleo.vista_edades_desglosado.edad_minimo,
bolsa_empleo.vista_edades_desglosado.edad_maximo,
bolsa_empleo.vista_edades_desglosado.id_vacancias
FROM
bolsa_empleo.vista_edades_desglosado

where bolsa_empleo.vista_edades_desglosado.id_vacancias= ':1' LIMIT 1",
    $values['id_vacancias']
);
$rsExists5 = DB::Query($strSQLExists5);
$data5 = db_fetch_array($rsExists5);
$_SESSION['fk_ocupacion_puesto']=$data5['fk_ocupacion_puesto'] ;
$_SESSION['salario_descripcion']=$data5['descripcion_salario'] ;
$_SESSION['salario']=$data5['salario'] ;
$_SESSION['edad_minimo']=$data5['edad_minimo'] ;
$_SESSION['edad_maximo']=$data5['edad_maximo'] ;

$values['fk_ocupacion_puesto']=$_SESSION['fk_ocupacion_puesto'];
$values['salario_descripcion']=$_SESSION['salario_descripcion'];
$values['salario_final']=$_SESSION['salario'];
$values['edad_rango_bajo']=$_SESSION['edad_minimo'];
$values['edad_rango_alto']=$_SESSION['edad_maximo'];
$pageObject->setProxyValue("edad_rango_bajo1", $_SESSION['edad_minimo']);
$pageObject->setProxyValue("edad_rango_alto1", $_SESSION['edad_maximo']);
// Place event code here.
// Use "Add Action" button to add code snippets.
;		
} // function ProcessValuesEdit

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Before display
function BeforeShowEdit(&$xt, &$templatefile, $values, $pageObject)
{

		
$values['fk_ocupacion_puesto']=$_SESSION['fk_ocupacion_puesto'];
$values['salario_descripcion']=$_SESSION['salario_descripcion'];
$values['salario_final']=$_SESSION['salario'];
$values['edad_rango_bajo']=$_SESSION['edad_minimo'];
$values['edad_rango_alto']=$_SESSION['edad_maximo'];

$pageObject->hideItem("integrated_edit_field");


// Place event code here.
// Use "Add Action" button to add code snippets.
;		
} // function BeforeShowEdit

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		



}
?>

<?php

/**
 * 	Dear developer!
 *	Never modify events.php file, it is autogenerated.
 *  Modify PHP/EventTemplates/events.txt instead.
 *
 */

 class eventclass_vacancia  extends eventsBase
{
	function __construct()
	{
	// fill list of events
		$this->events["BeforeAdd"]=true;

		$this->events["CustomAdd"]=true;

		$this->events["BeforeShowAdd"]=true;


		$this->events["BeforeEdit"]=true;

		$this->events["CustomEdit"]=true;

		$this->events["ProcessValuesEdit"]=true;

		$this->events["BeforeShowEdit"]=true;


		$this->events["BeforeMoveNextList"]=true;



		$this->events["BeforeShowList"]=true;


	}

//	handlers

		
		
		
		
		
		
		
		
		
		
		
		
		
				// Before record added
function BeforeAdd(&$values, &$sqlValues, &$message, $inline, $pageObject)
{

		global $cman;

// Verificar conexión a internet
function checkInternetConnection() {
    $connected = @fsockopen("www.example.com", 80);
    if ($connected) {
        fclose($connected);
        return true; // conexión exitosa
    }
    return false; // no hay conexión
}

// Verificar conexión a la base de datos
function checkDatabaseConnection($cman) {
    try {
        $connection = $cman->byName("myConn");
        $connection->EXEC("SELECT 1"); // Ejecuta una consulta de prueba
        return true; // conexión exitosa
    } catch (Exception $e) {
        return false; // no hay conexión
    }
}



try {
    // Verificar conexión a internet
    if (!checkInternetConnection()) {
        throw new Exception("No hay conexión a internet.");
    }

    // Verificar conexión a la base de datos
    if (!checkDatabaseConnection($cman)) {
        throw new Exception("No se pudo establecer conexión con la base de datos.");
    }
$msg = "Exito: ";
} catch (Exception $e) {
    // Si hay un error en alguno de los inserts, realizar un rollback y mostrar el mensaje de error
    if (isset($connection)) {
        $connection->EXEC("ROLLBACK;");
    }
    $msg = "Error: " . $e->getMessage();
    $message($msg);
    return false;
}



//insertar nuevos ids si son detectados en requisitos, se detectan por sus ids no son numericos
$id_requisitos_multi_todos = explode(",",$_REQUEST["valores_multi_requisitos_todos"]);

$id_valores_multi_habilidades_conocimiento_todos = explode(",",$_REQUEST["valores_multi_habilidades_conocimiento_todos"]);



$rray_nuevos_requisitos_id= [];

$rray_nuevos_habilidades_id= [];





//proceso de requisitos
	foreach ($id_requisitos_multi_todos as  $valuetoinsert)
      {

		if (!is_numeric($valuetoinsert)){

       $sqlinsert = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_requisitos_excluyentes(descripcion) values 
				(':1') ON CONFLICT ON CONSTRAINT vacancia_requisitos_excluyentes_descripcion_key DO UPDATE SET descripcion = excluded.descripcion  RETURNING id_requisitos_vacancia",$valuetoinsert);
				$rx=DB::Query($sqlinsert);
				$row = $rx->fetchAssoc(); 
				$new_id_requisitos_nuevos = $row['id_requisitos_vacancia'];
        array_push($rray_nuevos_requisitos_id, $new_id_requisitos_nuevos);

     }
			
     }

  //crear el array con los posibles id ya existentes

foreach ($id_requisitos_multi_todos as  $valuetoinsert)
      {

		if (is_numeric($valuetoinsert)){

       
       array_push($rray_nuevos_requisitos_id, $valuetoinsert);

     }
			
     }


//aqui empieza procesamiento de habilidades

foreach ($id_valores_multi_habilidades_conocimiento_todos as  $valuetoinsert2)
      {

		if (!is_numeric($valuetoinsert2)){

       $sqlinsert2 = DB::PrepareSQL("INSERT INTO bolsa_empleo.habilidades(descripcion) values 
				(':1') ON CONFLICT ON CONSTRAINT habilidades_descripcion_key DO UPDATE SET descripcion = excluded.descripcion  RETURNING id_habilidad",$valuetoinsert2);
				$rx2=DB::Query($sqlinsert2);
				$row2 = $rx2->fetchAssoc(); 
				$new_id_habilidades_nuevos = $row2['id_habilidad'];
       array_push($rray_nuevos_habilidades_id, $new_id_habilidades_nuevos);

     }
			
     }

  //crear el array con los posibles id ya existentes

foreach ($id_valores_multi_habilidades_conocimiento_todos as  $valuetoinsert3)
      {

		if (is_numeric($valuetoinsert3)){

       
       array_push($rray_nuevos_habilidades_id, $valuetoinsert3);

     }
			
     }




$values["fk_ocupacion_puesto"]= $_REQUEST["valores_multi_ocupacion_puesto_todos"]; 
$values["requisitos_exclu_formacion"]= implode(',', $rray_nuevos_requisitos_id); 

$values["habilidades_conocimiento"]= implode(',', $rray_nuevos_habilidades_id); 



$values["salario_final"] = str_replace('.', '', $values["salario_final"]);

$values["id_formacion_academica"]=ucfirst($values["id_formacion_academica"]);
$values["tipo_movilidad"]=ucfirst($values["tipo_movilidad"]);




$values["descripcion_puesto"]=ucfirst($values["descripcion_puesto"]);
$values["requisitos_exclu_formacion"]=ucfirst($values["requisitos_exclu_formacion"]);
$values["habilidades_conocimiento"]=ucfirst($values["habilidades_conocimiento"]);

return true;
;		
} // function BeforeAdd

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Custom add
function CustomAdd(&$values, &$keys, &$error, $inline, $pageObject)
{

		$userData = Security::currentUserData();
global $cman;

try {
    // Iniciar una transacción
    $connection = $cman->byName("myConn");

$connection->EXEC("START TRANSACTION;");
//// insertar vacancia 
$vacancia = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia
        (fecha_creacion_vacancia, id_estado_vacancia, fecha_expiracion_vacancia, cantidad_vacancia,usuario,fk_id_feria_empleo) 
        VALUES (now(), 2, ':1', ':2',':3',':4') RETURNING id_vacancias;",
					$values["fecha_expiracion_vacancia"],
					$values["cantidad_vacancia"],
				$userData["id"],
					$values["fk_id_feria_empleo"]);
$rx=DB::Query($vacancia);
if (!$rx) {
        throw new Exception("Error en la consulta de inserción de vacancia.");
    }
$row = $rx->fetchAssoc(); 
$new_id_vacancias = $row['id_vacancias'];
    // Insertar puesto
$puesto = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_puesto
					(fk_ocupacion_puesto,
						salario,
						tipo_contrato,
						descripcion_puesto,
						id_vacancia,
						id_rubro,
						anos_experiencia_vacancia,
						meses_experiencia_vacancia,
						horario_rotativo,
						modalidad_trabajo,
						descripcion_salario,
					tipo_remuneracion) 
					values (':1',':2',':3',':4',':5',':6',':7',':8',':9',':10',':11',':12')RETURNING id_puesto_vacancia;",
					$values["fk_ocupacion_puesto"],
					$values["salario_final"],
					$values["tipo_contrato"],
					$values["descripcion_puesto"],
				$new_id_vacancias,
					$values["id_rubro"],
					$values["anos_experiencia_vacancia"],
					$values["meses_experiencia_vacancia"],
					$values["horario_rotativo"],
					$values["modalidad_trabajo"],
					$values["salario_descripcion"],
					$values["tipo_remuneracion"]);

$rxpuesto=DB::Query($puesto);
if (!$rxpuesto) {
        throw new Exception("Error en la consulta de inserción de puesto.");
    }
$rowpuesto = $rxpuesto->fetchAssoc(); 
$new_id_puesto = $rowpuesto['id_puesto_vacancia'];
 // Insertar empresa
$empresa = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_empresa
					(id_empresa_sucursal,
					id_contacto_sucursal,
					id_cidudad,
					id_departamento,
					id_vacancia) 
					values (':1',':2',':3',':4',':5')RETURNING id_empresa_vacancia;",
					$values["id_empresa_sucursal"],
					$values["id_contacto_sucursal"],
					$values["id_cidudad"],
					$values["id_departamento"],
				$new_id_vacancias);
			$rxempresa=DB::Query($empresa);
 if (!$rxempresa) {
        throw new Exception("Error en la consulta de inserción de empresa.");
    }
$rowempresa = $rxempresa->fetchAssoc(); 
$new_id_empresa = $rowempresa['id_empresa_vacancia'];

/////insertar requisito
$requisitos = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_requisito
					(genero,
						movilidad_propia,
						tipo_movilidad,
						id_registro_conducir,
						discapacidad_aceptada,
						id_vacancia,
						nacionalidad,
						edad,
					requisitos_exclu_formacion,
					habilidades_conocimiento,
					id_formacion_academica) 
					values (':1',':2',':3',':4',':5',':6',':7',':8',':9',':10',':11')RETURNING id_vacancia_requisito;",
					$values["genero"],
					$values["movilidad_propia"],
					$values["tipo_movilidad"],
					$values["id_registro_conducir"],
					$values["discapacidad_aceptada"],
			$new_id_vacancias,
			$values["nacionalidad"],
					"[".$values["edad_rango_bajo"]."-".$values['edad_rango_alto']."]",		
				$values["requisitos_exclu_formacion"],
					$values["habilidades_conocimiento"],
					$values["id_formacion_academica"]);
					$rxx=DB::Query($requisitos);
					if (!$rxx) {
							  throw new Exception("Error en la consulta de inserción de requisitos.");
						 }
						$roww = $rxx->fetchAssoc(); 
						$new_id_vacancia_requisito = $roww['id_vacancia_requisito'];

    // Resto del código de inserción aquí...
 // Insertar en la tabla de detalles de movilidad
$tipo_movilidad = explode(",",$values["tipo_movilidad"]);


      foreach ($tipo_movilidad as  $value)
      {
$movilidad = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_detalle_movilidad
            (id_tipo_movilidad, id_vacancia_requisito, movilidad_propia) 
            VALUES (':1', ':2', ':3')",
            $value,
            $new_id_vacancia_requisito,
            $values["id_registro_conducir"],
            $values["movilidad_propia"]);
        $rx2 = DB::Query($movilidad);
        if (!$rx2) {
            throw new Exception("Error en la inserción de detalles de movilidad.");
        }

}
 // Insertar en la tabla de detalles de registro de conducir
$registro_conducir = explode(",",$values["id_registro_conducir"]);


      foreach ($registro_conducir as  $value_regi)
      {
$registro_conducir_vaca = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_detalle_registro_conducir
            (id_vacancia_requisitos, id_tipo_registro_conducir) 
            VALUES (':1', ':2')",
            $new_id_vacancia_requisito,
            $value_regi);
        $rx6 = DB::Query($registro_conducir_vaca);
        if (!$rx6) {
            throw new Exception("Error en la inserción de detalles de registro de conducir.");
        }
}
 // Insertar en la tabla vacancia_discapa_aceptada
$vacancia_discapa_aceptada = explode(",",$values["discapacidad_aceptada"]);


      foreach ($vacancia_discapa_aceptada as  $value1)
      {
 $discapacidad = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_discapa_aceptada
            (id_discapacidad_vacancia, id_vacancia_requisito) 
            VALUES (':1', ':2')",
            $value1,
            $new_id_vacancia_requisito);
						$rx1 = DB::Query($discapacidad);
       
        if (!$rx1) {
            throw new Exception("Error en la inserción de discapacidades aceptadas.");
        }

}

  // Insertar en la tabla de requisitos excluyentes de formación
$vacancia_requisito_excluyente_detalle = explode(",",$values["requisitos_exclu_formacion"]);


      foreach ($vacancia_requisito_excluyente_detalle as  $value4)
      {
$requisitos_exclu_formacion = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_requisito_excluyente_detalle
            (id_vacancia_requisito, id_requisito_excluyente) 
            VALUES (':1', ':2')",
            $new_id_vacancia_requisito,
            $value4);
        $rx3 = DB::Query($requisitos_exclu_formacion);
        if (!$rx3) {
            throw new Exception("Error en la inserción de requisitos excluyentes de formación.");
        }
}
   // Insertar en la tabla de habilidades y conocimientos
$vacancia_habilidad_conocimiento = explode(",",$values["habilidades_conocimiento"]);


      foreach ($vacancia_habilidad_conocimiento as  $value5)
      {
$habilidades_conocimiento = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_habilidad_conocimiento
            (id_habilidad, id_vacancia_requisito) 
            VALUES (':1', ':2')",
            $value5,
            $new_id_vacancia_requisito);
        $rx4 = DB::Query($habilidades_conocimiento);
        if (!$rx4) {
            throw new Exception("Error en la inserción de habilidades y conocimientos.");
        }
}

   // Insertar en la tabla de formación académica
$vacancia_formacion_academica_detalle = explode(",",$values["id_formacion_academica"]);

      foreach ($vacancia_formacion_academica_detalle as  $value6)
      {
$formacion_academica = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_formacion_academica_detalle
            (id_formacion_vacancia, id_vacancia_requisito) 
            VALUES (':1', ':2')",
            $value6,
            $new_id_vacancia_requisito);
        $rx5 = DB::Query($formacion_academica);
        if (!$rx5) {
            throw new Exception("Error en la inserción de formación académica.");
        }
}

// Insertar en la tabla de cambios de estado de la vacancia
$strSQLExistscambio = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_cambio_estado
					(id_vacancia,
						estado_vacancia,
						fecha_cambio,
						estado_anterior,
						usuario) 
					values (':1',':2',':3',':4',':5');",
						$new_id_vacancias,
					1,
					 now(),
					0,
					$userData["id"]);
			$rx7 = DB::Query($strSQLExistscambio);
    if (!$rx7) {
        throw new Exception("Error en la inserción de cambios de estado de la vacancia.");
    }
$connection->EXEC("COMMIT;");
    $msg1 = "Se Agrego la vacancia";
} catch (Exception $e) {
    // Si hay un error en alguno de los inserts, realizar un rollback y mostrar el mensaje de error
    $connection->EXEC("ROLLBACK;");
   $msg1 = "Error: " . $e->getMessage();
$auditoria = DB::PrepareSQL("INSERT INTO bolsa_empleo.auditoria_administrador_bolsa (tabla_afectada, operacion, usuario, detalles, direccion_ip)
        VALUES (':1', ':2', ':3', ':4', ':5')",'bolsa_empleo.vacancia', 'error', 	$userData["id"],
 $msg1,
 $_SERVER['REMOTE_ADDR']);
   DB::Exec($auditoria);
return false;

}




$_SESSION['postid_vacancias']=$new_id_vacancias ;
$pageObject->setMessage($msg1);

return false;
;		
} // function CustomAdd

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Before display
function BeforeShowAdd(&$xt, &$templatefile, $pageObject)
{

		
  
$pageObject->setProxyValue("vacancia_dias", $_SESSION["vacancia_dias"]);


;		
} // function BeforeShowAdd

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Before record updated
function BeforeEdit(&$values, &$sqlValues, $where, &$oldvalues, &$keys, &$message, $inline, $pageObject)
{

			// Obtener valores de los campos múltiples enviados por formulario (como listas separadas por comas)
	$ocupaciones_puesto_ids = explode(",", $_REQUEST["valores_multi_ocupacion_puesto_todos"]);
	$salarios_descripcion_ids = explode(",", $_REQUEST["valores_multi_descripcion_salario_todos"]);
	$requisitos_ids = explode(",", $_REQUEST["valores_multi_requisitos_todos"]);
	$habilidades_ids = explode(",", $_REQUEST["valores_multi_habilidades_conocimiento_todos"]);
	
	// Arrays para almacenar los IDs finales (ya sean existentes o nuevos)
	$nuevos_ocupaciones_ids = [];
	$nuevos_salarios_ids = [];
	$nuevos_requisitos_ids = [];
	$nuevos_habilidades_ids = [];
	
	/*** PROCESAMIENTO DE OCUPACIONES Y PUESTOS ***/
	foreach ($ocupaciones_puesto_ids as $ocupacion) {
		// Si el ID no es numérico, significa que es un nuevo valor y debe insertarse
		if (!is_numeric($ocupacion)) {
			$sql = DB::PrepareSQL(
				"INSERT INTO bolsa_empleo.ocupaciones_nuevas(descripcion) 
					VALUES (':1') 
					ON CONFLICT ON CONSTRAINT ocupaciones_nuevas_un 
					DO UPDATE 
					SET descripcion = excluded.descripcion  
					RETURNING id_ocu_puest_clasic", 
				$ocupacion
			);
			$resultado = DB::Query($sql);
			$fila = $resultado->fetchAssoc();
			$nuevo_id_ocupacion = $fila['id_ocu_puest_clasic'];
			//array_push($nuevos_ocupaciones_ids, $nuevo_id_ocupacion);
			$nuevos_ocupaciones_ids[] = $nuevo_id_ocupacion;
		}
	}

	// Agregar IDs existentes de ocupaciones a la lista final
	foreach ($ocupaciones_puesto_ids as $ocupacion) {
		if (is_numeric($ocupacion)) {
			//array_push($nuevos_ocupaciones_ids, $ocupacion);
			$nuevos_ocupaciones_ids[] = $ocupacion;
		}
	}
	
	
	/*** PROCESAMIENTO DE SALARIOS ***/
	foreach ($salarios_descripcion_ids as $salario) {
		if (!is_numeric($salario)) {
			$sql_salario = DB::PrepareSQL(
				"INSERT INTO bolsa_empleo.vacancia_salario_descripcion(descripcion_salario) 
					VALUES (':1') 
					ON CONFLICT ON CONSTRAINT vacancia_salario_descripcion_un 
					DO UPDATE 
					SET descripcion_salario = excluded.descripcion_salario  
					RETURNING id_va_salario_desc", 
					$salario
			);
			$resultado_salario = DB::Query($sql_salario);
			$fila_salario = $resultado_salario->fetchAssoc(); 
			$nuevo_id_salario = $fila_salario['id_va_salario_desc'];
			//array_push($nuevos_salarios_ids, $nuevo_id_salario);
			$nuevos_salarios_ids[] = $nuevo_id_salario;
		}
	}

	// Agregar IDs existentes de salarios a la lista final
	foreach ($salarios_descripcion_ids as $salario) {
		if (is_numeric($salario)) {
			//array_push($nuevos_salarios_ids, $salario);
			$nuevos_salarios_ids[] = $salario;
		}
	}

	/*** PROCESAMIENTO DE REQUISITOS ***/
	foreach ($requisitos_ids as $requisito){
		if (!is_numeric($requisito)) {
			$sql_requisito = DB::PrepareSQL(
				"INSERT INTO bolsa_empleo.vacancia_requisitos_excluyentes(descripcion) 
					VALUES (':1') 
					ON CONFLICT ON CONSTRAINT vacancia_requisitos_excluyentes_descripcion_key 
					DO UPDATE 
					SET descripcion = excluded.descripcion  
					RETURNING id_requisitos_vacancia", 
				$requisito
			);
			$resultado_requisito = DB::Query($sql_requisito);
			$fila_requisito = $resultado_requisito->fetchAssoc(); 
			$nuevo_id_requisito = $fila_requisito['id_requisitos_vacancia'];
			//array_push($nuevos_requisitos_ids, $nuevo_id_requisito);
			$nuevos_requisitos_ids[] = $nuevo_id_requisito;
		}
	}

	// Agregar IDs existentes de requisitos a la lista final
	foreach ($requisitos_ids as $requisito) {
		if (is_numeric($requisito)) {
			//array_push($nuevos_requisitos_ids, $requisito);
			$nuevos_requisitos_ids[] = $requisito;
		}
	}


	/*** PROCESAMIENTO DE HABILIDADES Y CONOCIMIENTOS ***/
	foreach ($habilidades_ids as $habilidad) {
		if (!is_numeric($habilidad)) {
			$sql_habilidad = DB::PrepareSQL(
				"INSERT INTO bolsa_empleo.habilidades(descripcion) 
					VALUES (':1') 
					ON CONFLICT ON CONSTRAINT habilidades_descripcion_key 
					DO UPDATE 
					SET descripcion = excluded.descripcion  
					RETURNING id_habilidad", 
				$habilidad
			);
			$resultado_habilidad = DB::Query($sql_habilidad);
			$fila_habilidad = $resultado_habilidad->fetchAssoc(); 
			$nuevo_id_habilidad = $fila_habilidad['id_habilidad'];
			//array_push($nuevos_habilidades_ids, $nuevo_id_habilidad);
			$nuevos_habilidades_ids[] = $nuevo_id_habilidad;
		}
	}

	// Agregar IDs existentes de habilidades a la lista final
	foreach ($habilidades_ids as $habilidad) {
		if (is_numeric($habilidad)) {
			//array_push($nuevos_habilidades_ids, $habilidad);
			$nuevos_habilidades_ids[] = $nuevo_id_habilidad;
		}
	}
	
	/*** ACTUALIZACIÓN DE LOS VALORES ANTES DE GUARDAR ***/
	$values["fk_ocupacion_puesto"] = implode(',', $nuevos_ocupaciones_ids);
	$values["salario_descripcion"] = implode(',', $nuevos_salarios_ids);
	$values["requisitos_exclu_formacion"] = implode(',', $nuevos_requisitos_ids);
	$values["habilidades_conocimiento"] = implode(',', $nuevos_habilidades_ids);
	
	// Formatear algunos valores antes de guardarlos
	$values["id_formacion_academica"] = ucfirst($values["id_formacion_academica"]);
	$values["tipo_movilidad"] = ucfirst($values["tipo_movilidad"]);
	$values["descripcion_puesto"] = ucfirst($values["descripcion_puesto"]);
	$values["requisitos_exclu_formacion"] = ucfirst($values["requisitos_exclu_formacion"]);
	$values["habilidades_conocimiento"] = ucfirst($values["habilidades_conocimiento"]);
	
	return true;
;		
} // function BeforeEdit

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Custom record update
function CustomEdit(&$values, $where, &$oldvalues, &$keys, &$error, $inline, $pageObject)
{

		$userData = Security::currentUserData();
global $cman;

$vacancia = DB::PrepareSQL("UPDATE bolsa_empleo.vacancia 
																SET fecha_expiracion_vacancia = ':1',
																	cantidad_vacancia = ':2',
																	fk_id_feria_empleo = ':3',
																	imagen_perfil = ':4'
																WHERE id_vacancias = ':5'",
																	$values["fecha_expiracion_vacancia"],
																	$values["cantidad_vacancia"], 
																	$values["fk_id_feria_empleo"],
																	pg_escape_bytea($values["imagen_perfil"]),
																	$keys["id_vacancias"]);
DB::Exec($vacancia);


$puesto = DB::PrepareSQL("UPDATE bolsa_empleo.vacancia_puesto 
															SET fk_ocupacion_puesto = ':1',
																salario = ':2',
																tipo_contrato = ':3',
																descripcion_puesto = ':4',
																id_rubro = ':5',
																anos_experiencia_vacancia = ':6',
																meses_experiencia_vacancia = ':7',
																horario_rotativo = ':8',
																modalidad_trabajo = ':9',
																descripcion_salario = ':10',
																tipo_remuneracion = ':11'
															WHERE id_vacancia = ':12'",
																$values["fk_ocupacion_puesto"],
																$values["salario_final"],
																$values["tipo_contrato"],
																$values["descripcion_puesto"],
																$values["id_rubro"],
																$values["anos_experiencia_vacancia"],
																$values["meses_experiencia_vacancia"],
																$values["horario_rotativo"],
																$values["modalidad_trabajo"],
																$values["salario_descripcion"],
																$values["tipo_remuneracion"],
																$keys["id_vacancias"]);
DB::Exec($puesto);


$empresa = DB::PrepareSQL("UPDATE bolsa_empleo.vacancia_empresa 
															SET id_empresa_sucursal = ':1',
																id_contacto_sucursal = ':2',
																id_cidudad = ':3',
																id_departamento = ':4' 
															WHERE id_vacancia = ':5'",
																$values["id_empresa_sucursal"],
																$values["id_contacto_sucursal"],
																$values["id_cidudad"],
																$values["id_departamento"],
																$keys["id_vacancias"]);
DB::Exec($empresa);

$vacancia_requisito = DB::PrepareSQL("UPDATE bolsa_empleo.vacancia_requisito 
																					SET genero = ':1',
																						movilidad_propia = ':2',
																						tipo_movilidad	= ':3', 
																						id_registro_conducir = ':4', 
																						discapacidad_aceptada = ':5', 
																						nacionalidad = ':6', 
																						edad = ':7', 
																						requisitos_exclu_formacion = ':8', 
																						habilidades_conocimiento = ':9',
																						id_formacion_academica = ':10' 
																					WHERE id_vacancia = ':11'",
																						$values["genero"],
																						$values["movilidad_propia"],
																						$values["tipo_movilidad"],
																						$values["id_registro_conducir"],
																						$values["discapacidad_aceptada"],
																						$values["nacionalidad"],
																						"[".$values["edad_rango_bajo"]."-".$values['edad_rango_alto']."]",		
																						$values["requisitos_exclu_formacion"],
																						$values["habilidades_conocimiento"],
																						$values["id_formacion_academica"],
																						$keys["id_vacancias"]);
DB::Exec($vacancia_requisito);


$consulta_requisitos = DB::PrepareSQL("SELECT bolsa_empleo.vacancia_requisito.id_vacancia_requisito
																						FROM bolsa_empleo.vacancia_requisito
																						WHERE bolsa_empleo.vacancia_requisito.id_vacancia =  ':1' 
																						LIMIT 1", $keys["id_vacancias"]);
$consulta_requi_eli1 = DB::Query($consulta_requisitos);
$consulta_requi_eli = $consulta_requi_eli1->fetchAssoc();


$eliminar_discapa = DB::PrepareSQL("DELETE FROM bolsa_empleo.vacancia_discapa_aceptada
																				WHERE bolsa_empleo.vacancia_discapa_aceptada.id_vacancia_requisito = ':1'",
																					$consulta_requi_eli['id_vacancia_requisito']);
DB::Exec($eliminar_discapa);

$eliminar_requisito = DB::PrepareSQL("DELETE FROM bolsa_empleo.vacancia_requisito_excluyente_detalle
																					WHERE bolsa_empleo.vacancia_requisito_excluyente_detalle.id_vacancia_requisito = ':1'",
																					$consulta_requi_eli['id_vacancia_requisito']);
DB::Exec($eliminar_requisito);


$eliminar_habilidad = DB::PrepareSQL("DELETE FROM bolsa_empleo.vacancia_habilidad_conocimiento
																					WHERE bolsa_empleo.vacancia_habilidad_conocimiento.id_vacancia_requisito = ':1'",
																						$consulta_requi_eli['id_vacancia_requisito']);
DB::Exec($eliminar_habilidad);

$eliminar_vacancia_detalle_movilidad = DB::PrepareSQL("DELETE FROM bolsa_empleo.vacancia_detalle_movilidad
																															WHERE bolsa_empleo.vacancia_detalle_movilidad.id_vacancia_requisito = ':1'",
																																$consulta_requi_eli['id_vacancia_requisito']);
DB::Exec($eliminar_vacancia_detalle_movilidad);

$eliminar_vacancia_detalle_registro_conducir = DB::PrepareSQL("DELETE FROM bolsa_empleo.vacancia_detalle_registro_conducir
																																				WHERE bolsa_empleo.vacancia_detalle_registro_conducir.id_vacancia_requisitos = ':1'",
																																					$consulta_requi_eli['id_vacancia_requisito']);
DB::Exec($eliminar_vacancia_detalle_registro_conducir);

$eliminar_vacancia_formacion_academica_detalle = DB::PrepareSQL("DELETE FROM bolsa_empleo.vacancia_formacion_academica_detalle
																																					WHERE bolsa_empleo.vacancia_formacion_academica_detalle.id_vacancia_requisito = ':1'", $consulta_requi_eli['id_vacancia_requisito']);
DB::Exec($eliminar_vacancia_formacion_academica_detalle);


$vacancia_discapa_aceptada = explode(",",$values["discapacidad_aceptada"]);
foreach ($vacancia_discapa_aceptada as  $value1) {
	$discapacidad = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_discapa_aceptada(id_discapacidad_vacancia, 
																																															id_vacancia_requisito) 
																			VALUES (':1', ':2')",
																				$value1,
																				$consulta_requi_eli['id_vacancia_requisito']);
	DB::Exec($discapacidad); 
}


$tipo_movilidad = explode(",",$values["tipo_movilidad"]);
foreach ($tipo_movilidad as  $value) {
	$movilidad = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_detalle_movilidad(id_tipo_movilidad, 
																																														id_vacancia_requisito, 
																																														movilidad_propia) 
																		VALUES (':1', ':2', ':3')",
																		$value,
																		$new_id_vacancia_requisito,
																		$values["movilidad_propia"]);
	DB::Exec($movilidad); 
}


$vacancia_requisito_excluyente_detalle = explode(",", $values["requisitos_exclu_formacion"]);
foreach ($vacancia_requisito_excluyente_detalle as  $value4) {
	$requisitos_exclu_formacion = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_requisito_excluyente_detalle(id_vacancia_requisito, 
																																																														id_requisito_excluyente) 
																											VALUES (':1',':2')",
																											$consulta_requi_eli['id_vacancia_requisito'], 
																											$value4);
	DB::Exec($requisitos_exclu_formacion); 
}

$vacancia_habilidad_conocimiento = explode(",", $values["habilidades_conocimiento"]);
foreach ($vacancia_habilidad_conocimiento as  $value5) {
	$habilidades_conocimiento = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_habilidad_conocimiento(id_habilidad, 
																																																									id_vacancia_requisito) 
																										VALUES (':1', ':2')",
																										$value5,
																										$consulta_requi_eli['id_vacancia_requisito']);
	DB::Exec($habilidades_conocimiento); 
}

$vacancia_formacion_academica_detalle = explode(",", $values["id_formacion_academica"]);
foreach ($vacancia_formacion_academica_detalle as  $value6) {
	$formacion_academica = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_formacion_academica_detalle(id_formacion_vacancia, 
																																																									id_vacancia_requisito) 
																							VALUES (':1', ':2')",
																								$value6,
																								$consulta_requi_eli['id_vacancia_requisito']);
	DB::Exec($formacion_academica); 
}

$registro_conducir = explode(",", $values["id_registro_conducir"]);
foreach ($registro_conducir as $value_regi) {
	$registro_conducir_vaca = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_detalle_registro_conducir(id_vacancia_requisitos, 
																																																										id_tipo_registro_conducir) 
																									VALUES (':1',':2')",
																										$consulta_requi_eli['id_vacancia_requisito'],
																										$value_regi);
	DB::Exec($registro_conducir_vaca); 
}

$consulta_audit = DB::PrepareSQL("SELECT bolsa_empleo.vacancia.id_vacancias,
																					bolsa_empleo.vacancia_puesto.id_puesto_vacancia,
																					bolsa_empleo.vacancia_empresa.id_empresa_vacancia,
																					bolsa_empleo.vacancia_requisito.id_vacancia_requisito
																			FROM bolsa_empleo.vacancia
																				INNER JOIN bolsa_empleo.vacancia_empresa ON bolsa_empleo.vacancia_empresa.id_vacancia = bolsa_empleo.vacancia.id_vacancias
																				INNER JOIN bolsa_empleo.vacancia_puesto ON bolsa_empleo.vacancia_puesto.id_vacancia = bolsa_empleo.vacancia.id_vacancias
																				INNER JOIN bolsa_empleo.vacancia_requisito ON bolsa_empleo.vacancia_requisito.id_vacancia = bolsa_empleo.vacancia.id_vacancias
																			WHERE bolsa_empleo.vacancia.id_vacancias = ':1' 
																			LIMIT 1", $keys["id_vacancias"]);
$consulta_audit_now = DB::Query($consulta_audit);
$consulta_audit_resul = $consulta_audit_now->fetchAssoc();


$auditoria = DB::PrepareSQL("INSERT INTO bolsa_empleo.auditoria_administrador_bolsa (tabla_afectada, 
																																																operacion, 
																																																usuario, 
																																																detalles, 
																																																direccion_ip)
																	VALUES (':1', ':2', ':3', ':4', ':5')", 
																						'bolsa_empleo.vacancia', 
																						'edit', 
																						$userData["id"], 
																						"id_vacancia:'".$consulta_audit_resul["id_vacancias"]."'||id_puesto_vacancia:'".$consulta_audit_resul["id_puesto_vacancia"]."'||id_empresa_vacancia:'".$consulta_audit_resul["id_empresa_vacancia"]."'
																							||id_vacancia_requisito:'". $consulta_audit_resul["id_vacancia_requisito"]."'||id_registro_conducir:'". $values["id_registro_conducir"]."'
																							||id_formacion_academica:'". $values["id_formacion_academica"]."'||habilidades_conocimiento:'". $values["habilidades_conocimiento"]."'
																							||requisitos_exclu_formacion:'". $values["requisitos_exclu_formacion"]."'||tipo_movilidad:'". $values["tipo_movilidad"]."'
																							||discapacidad_aceptada:'". $values["discapacidad_aceptada"]."'    fecha_expiracion_vacancia:'".$values["fecha_expiracion_vacancia"]."
																							'||cantidad_vacancia:'".$values["cantidad_vacancia"]."'||fk_id_feria_empleo:'".$values["fk_id_feria_empleo"]."'
																							||fk_ocupacion_puesto:'". $values["fk_ocupacion_puesto"]."'||salario_final:'". $values["salario_final"]."'
																							||tipo_contrato:'". $values["tipo_contrato"]."'||descripcion_puesto:'". $values["descripcion_puesto"]."'
																							||id_rubro:'". $values["id_rubro"]."'||anos_experiencia_vacancia:'". $values["anos_experiencia_vacancia"]."'
																							||meses_experiencia_vacancia:'". $values["meses_experiencia_vacancia"]."'
																							||horario_rotativo:'". $values["horario_rotativo"]."'
																							||modalidad_trabajo:'".$values["modalidad_trabajo"]."'
																							||salario_descripcion:'".$values["salario_descripcion"]."'
																							||tipo_remuneracion:'".$values["tipo_remuneracion"]."'
																							||id_empresa_sucursal:'".$values["id_empresa_sucursal"]."'
																							||id_contacto_sucursal:'".$values["id_contacto_sucursal"]."'
																							||id_cidudad:'".$values["id_cidudad"]."'
																							||id_departamento:'".$values["id_departamento"]."'
																							||genero:'".$values["genero"]."'
																							||movilidad_propia:'".$values["movilidad_propia"]."'
																							||tipo_movilidad:'".$values["tipo_movilidad"]."'
																							||id_registro_conducir:'".$values["id_registro_conducir"]."'
																							||discapacidad_aceptada:'".$values["discapacidad_aceptada"]."'
																							||nacionalidad:'".$values["nacionalidad"]."'
																							||edad_rango_bajo:'".$values["edad_rango_bajo"]."'
																							||edad_rango_alto:'".$values["edad_rango_alto"]."'
																							||requisitos_exclu_formacion:'".$values["requisitos_exclu_formacion"]."'
																							||habilidades_conocimiento:'".$values["habilidades_conocimiento"]."'
																							||id_formacion_academica:'".$values["id_formacion_academica"]."'",
																							$_SERVER['REMOTE_ADDR']);
 DB::Exec($auditoria);

return false;
;		
} // function CustomEdit

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Process record values
function ProcessValuesEdit(&$values, $pageObject)
{

		/*
$strSQLExists5 = DB::PrepareSQL("SELECT bolsa_empleo.vista_edades_desglosado.fk_ocupacion_puesto,
																							bolsa_empleo.vista_edades_desglosado.descripcion_salario,
																							bolsa_empleo.vista_edades_desglosado.salario,
																							bolsa_empleo.vista_edades_desglosado.edad_minimo,
																							bolsa_empleo.vista_edades_desglosado.edad_maximo,
																							bolsa_empleo.vista_edades_desglosado.id_vacancias,
																							bolsa_empleo.vista_edades_desglosado.horario_rotativo,
																							bolsa_empleo.vista_edades_desglosado.tipo_remuneracion
																			FROM bolsa_empleo.vista_edades_desglosado
																			WHERE bolsa_empleo.vista_edades_desglosado.id_vacancias= ':1' 
																			LIMIT 1",
																			//$keys['id_vacancias']
																			$values['id_vacancias']);
$rsExists5 = DB::Query($strSQLExists5);
$data5 = db_fetch_array($rsExists5);

if ($data5['horario_rotativo'] == 't') {
	$values['horario_rotativo'] = true;
}
if ($data5['horario_rotativo'] == 'f'){
	$values['horario_rotativo'] = false;
}

//$_SESSION['postid_vacancias'] = $keys['id_vacancias'];
$_SESSION['postid_vacancias'] = $values['id_vacancias'];
$values['tipo_remuneracion'] = $data5['tipo_remuneracion'];
$values['salario_descripcion'] = $data5['descripcion_salario'];
$values['salario_final'] = $data5['salario'];
$values['edad_rango_bajo'] = $data5['edad_minimo'];
$values['edad_rango_alto'] = $data5['edad_maximo'];
$pageObject->setProxyValue("edad_rango_bajo1", $data5['edad_minimo']);
$pageObject->setProxyValue("edad_rango_alto1", $data5['edad_maximo']);
*/

// Consulta para obtener información sobre la vacante basada en su ID
$sqlVacante = DB::PrepareSQL(
		"SELECT bolsa_empleo.vista_edades_desglosado.fk_ocupacion_puesto,
							bolsa_empleo.vista_edades_desglosado.descripcion_salario,
							bolsa_empleo.vista_edades_desglosado.salario,
							bolsa_empleo.vista_edades_desglosado.edad_minimo,
							bolsa_empleo.vista_edades_desglosado.edad_maximo,
							bolsa_empleo.vista_edades_desglosado.id_vacancias,
							bolsa_empleo.vista_edades_desglosado.horario_rotativo,
							bolsa_empleo.vista_edades_desglosado.tipo_remuneracion
			FROM bolsa_empleo.vista_edades_desglosado
			WHERE bolsa_empleo.vista_edades_desglosado.id_vacancias= ':1' 
			LIMIT 1",
		$values['id_vacancias']
);
// Ejecutar la consulta
$resultadoVacante = DB::Query($sqlVacante);
$datosVacante = db_fetch_array($resultadoVacante);

// Convertir 't' y 'f' en valores booleanos para mayor claridad
if ($datosVacante['horario_rotativo'] == 't') {
	$values['horario_rotativo'] = true; // Indica si el puesto tiene horario rotativo
}

if ($datosVacante['horario_rotativo'] == 'f') {
	$values['horario_rotativo'] = false;
}


// Guardar el ID de la vacante en la sesión para su uso posterior
$_SESSION['postid_vacancias'] = $values['id_vacancias'];

// Asignar valores obtenidos de la base de datos a variables más descriptivas
$values['tipo_remuneracion'] = $datosVacante['tipo_remuneracion'];
$values['salario_descripcion'] = $datosVacante['descripcion_salario'];
$values['salario_final'] = $datosVacante['salario'];
$values['edad_rango_bajo'] = $datosVacante['edad_minimo'];
$values['edad_rango_alto'] = $datosVacante['edad_maximo'];

// Pasar valores a la interfaz (proxy) para que puedan ser utilizados en el frontend
$pageObject->setProxyValue("edad_rango_bajo1", $datosVacante['edad_minimo']);
$pageObject->setProxyValue("edad_rango_alto1", $datosVacante['edad_maximo']);
;		
} // function ProcessValuesEdit

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Before display
function BeforeShowEdit(&$xt, &$templatefile, $values, $pageObject)
{

		
$pageObject->hideItem("integrated_edit_field6");

$strSQLExists5 = DB::PrepareSQL("SELECT bolsa_empleo.vista_edades_desglosado.fk_ocupacion_puesto,
																						bolsa_empleo.vista_edades_desglosado.descripcion_salario,
																						bolsa_empleo.vista_edades_desglosado.salario,
																						bolsa_empleo.vista_edades_desglosado.edad_minimo,
																						bolsa_empleo.vista_edades_desglosado.edad_maximo,
																						bolsa_empleo.vista_edades_desglosado.id_vacancias,
																						bolsa_empleo.vista_edades_desglosado.horario_rotativo,
																						bolsa_empleo.vista_edades_desglosado.tipo_remuneracion
																		FROM bolsa_empleo.vista_edades_desglosado
																		WHERE bolsa_empleo.vista_edades_desglosado.id_vacancias= ':1' 
																		LIMIT 1",
																		//$keys['id_vacancias']
																		$values['id_vacancias']
																	);
$rsExists5 = DB::Query($strSQLExists5);
$data5 = db_fetch_array($rsExists5);

if ($data5['horario_rotativo'] == 't') {
	$values['horario_rotativo'] = true;
}

if ($data5['horario_rotativo'] == 'f') {
	$values['horario_rotativo'] = false;
}

$_SESSION['postid_vacancias'] = $keys['id_vacancias'];
//$_SESSION['postid_vacancias'] = $values['id_vacancias'];
$values['tipo_remuneracion'] = $data5['tipo_remuneracion'];
$values['salario_descripcion'] = $data5['descripcion_salario'];
$values['salario_final'] = $data5['salario'];
$values['edad_rango_bajo'] = $data5['edad_minimo'];
$values['edad_rango_alto'] = $data5['edad_maximo'];
$pageObject->setProxyValue("edad_rango_bajo1", $data5['edad_minimo']);
$pageObject->setProxyValue("edad_rango_alto1", $data5['edad_maximo']);

;		
} // function BeforeShowEdit

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// List page: After record processed
function BeforeMoveNextList(&$data, &$row, &$record, $recordId, $pageObject)
{

		/*
 * Estados de Vacancia
 * Convocatoria Cerrada = 5, Activa = 2, En Evaluación = 3
 */

// Ocultar inicialmente los elementos que no deben ser visibles en el formulario.
$pageObject->hideItem("boton_cerrar_vacancia", $recordId);		// Oculta el botón "Cerrar Vacancia". Se mostrará o no dependiendo de las condiciones.
$pageObject->hideItem("boton_activar_vacancia", $recordId);		// Oculta el botón "Activar Vacancia". Se mostrará o no dependiendo de las condiciones.
$pageObject->hideItem("Evaluacion", $recordId);									// Oculta el botón "En Evaluacion". Se mostrará o no dependiendo de las condiciones.
$pageObject->hideItem("grid_details_link", $recordId);					// Oculta el enlace de detalles de cantidad de postulantes.
$pageObject->hideItem("text4", $recordId);												// Oculta el texto relacionado con el detalle de postulantes.

$now = date("Y-m-d H:i:s"); // Obtiene la fecha y hora actual en formato `Y-m-d H:i:s`.

// Condición 1: Si la vacancia ha expirado y está cerrada (estado = 5).
if ($data["fecha_expiracion_vacancia"] < $now && $data["id_estado_vacancia"] == 5) {
	$pageObject->hideItem("boton_cerrar_vacancia", $recordId);		// Deshabilita el botón "Cerrar Vacancia".
	$pageObject->hideItem("boton_activar_vacancia", $recordId);		// Deshabilita el botón "Activar Vacancia".
	$pageObject->hideItem("Evaluacion", $recordId);									// Deshabilita el botón "En Evaluación".
}


// Condición 2: Si la vacancia está activa y su fecha de expiración no ha pasado (estado = 5).
if ($data["fecha_expiracion_vacancia"] > $now && $data["id_estado_vacancia"] == 5) {
	$pageObject->hideItem("boton_cerrar_vacancia", $recordId);		// Deshabilita el botón "Cerrar Vacancia".
	$pageObject->showItem("boton_activar_vacancia", $recordId);		// Habilita el botón "Activar Vacancia".
	$pageObject->showItem("Evaluacion", $recordId);									// Habilita el botón "En Evaluación".
}

// Condición 3: Si la vacancia está activa y en proceso (estado = 2), y su fecha de expiración no ha pasado.
if ($data["fecha_expiracion_vacancia"] > $now && $data["id_estado_vacancia"] == 2) {
	$pageObject->showItem("boton_cerrar_vacancia", $recordId);		// Habilita el botón "Cerrar Vacancia".
	$pageObject->hideItem("boton_activar_vacancia", $recordId);		// Deshabilita el botón "Activar Vacancia".
	$pageObject->showItem("Evaluacion", $recordId);									// Habilita el botón "En Evaluación".
}

// Condición 4: Si la vacancia está "En Evaluacion" y en proceso (estado = 3), y su fecha de expiración no ha pasado.
if ($data["fecha_expiracion_vacancia"] > $now && $data["id_estado_vacancia"] == 3) {
	$pageObject->showItem("boton_cerrar_vacancia", $recordId);		// Habilita el botón "Cerrar Vacancia".
	$pageObject->showItem("boton_activar_vacancia", $recordId);		// Habilita el botón "Activar Vacancia".
}


// Consultar si existen postulaciones asociadas a la vacancia actual.
$strSQLExists5 = DB::PrepareSQL("
	SELECT bolsa_empleo.postulacion.id_vacancia,
					bolsa_empleo.postulacion.id_postulacion,
					bolsa_empleo.postulacion.id_estado,
					bolsa_empleo.postulacion.fecha_postulacion,
					bolsa_empleo.postulacion.fk_personaid
	FROM bolsa_empleo.postulacion
	WHERE bolsa_empleo.postulacion.id_vacancia = '" . $data["id_vacancias"] . "'");
$rsExists5 = DB::Query($strSQLExists5); // Ejecutar la consulta.
$data5 = $rsExists5->fetchAssoc();			// Obtener el primer resultado como un array asociativo.  

// Si no hay postulaciones asociadas a la vacancia.
if (!$data5) {
	$pageObject->hideItem("grid_details_link", $recordId);	// Oculta el enlace de detalles de cantidad de postulantes.
	$pageObject->showItem("text4", $recordId);							// Muestra el texto alternativo.
} else {
	$pageObject->showItem("grid_details_link", $recordId);	// Muestra el enlace de detalles de cantidad de postulantes.
	$pageObject->hideItem("text4", $recordId);							// Oculta el texto alternativo.
}

;		
} // function BeforeMoveNextList

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Before display
function BeforeShowList(&$xt, &$templatefile, $pageObject)
{

		$pageObject->hideItem("print_panel");  //Oculta el icono de la impresora
$pageObject->hideItem("grid_details_link1"); //Oculta el enlace que muestra el total de registros en la tabla seguimientos
$pageObject->hideItem("grid_details_link7"); //Oculta el enlace que muestra el total de registros de usuarios del sistema.
$pageObject->hideItem("grid_details_link2"); //Oculta el enlace que muestra el total de registros de usuarios que estan con estado=Seleccionado
$pageObject->hideItem("grid_details_link3"); //Oculta el enlace que muestra el total de registros de usuarios que estan con estado=Convocado
$pageObject->hideItem("grid_details_link4"); //Oculta el enlace que muestra el total de registros de usuarios que estan con estado=Postulado
$pageObject->hideItem("grid_details_link5"); //Oculta el enlace que muestra el total de registros de usuarios que estan con estado=Insertado
$pageObject->hideItem("grid_details_link6"); //Oculta el enlace que muestra el total de registros de usuarios que estan con estado=Preseleccionado
$pageObject->hideItem("grid_details_link8"); //Oculta el enlace que muestra el total de registros de resumen por vacancia

$pageObject->hideItem("grid_field9");
//print_r($_SESSION);
;		
} // function BeforeShowList

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		



}
?>

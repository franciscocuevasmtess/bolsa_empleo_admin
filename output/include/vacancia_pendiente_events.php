<?php

/**
 * 	Dear developer!
 *	Never modify events.php file, it is autogenerated.
 *  Modify PHP/EventTemplates/events.txt instead.
 *
 */

 class eventclass_vacancia_pendiente  extends eventsBase
{
	function __construct()
	{
	// fill list of events
		$this->events["BeforeAdd"]=true;

		$this->events["CustomAdd"]=true;

		$this->events["BeforeShowAdd"]=true;


		$this->events["BeforeEdit"]=true;

		$this->events["CustomEdit"]=true;

		$this->events["ProcessValuesEdit"]=true;

		$this->events["BeforeShowEdit"]=true;


		$this->events["BeforeMoveNextList"]=true;



		$this->events["BeforeShowList"]=true;


	}

//	handlers

		
		
		
		
		
		
		
		
		
		
		
		
		
				// Before record added
function BeforeAdd(&$values, &$sqlValues, &$message, $inline, $pageObject)
{

		global $cman;

// Verificar conexión a internet
function checkInternetConnection() {
    $connected = @fsockopen("www.example.com", 80);
    if ($connected) {
        fclose($connected);
        return true; // conexión exitosa
    }
    return false; // no hay conexión
}

// Verificar conexión a la base de datos
function checkDatabaseConnection($cman) {
    try {
        $connection = $cman->byName("myConn");
        $connection->EXEC("SELECT 1"); // Ejecuta una consulta de prueba
        return true; // conexión exitosa
    } catch (Exception $e) {
        return false; // no hay conexión
    }
}



try {
    // Verificar conexión a internet
    if (!checkInternetConnection()) {
        throw new Exception("No hay conexión a internet.");
    }

    // Verificar conexión a la base de datos
    if (!checkDatabaseConnection($cman)) {
        throw new Exception("No se pudo establecer conexión con la base de datos.");
    }
$msg = "Exito: ";
} catch (Exception $e) {
    // Si hay un error en alguno de los inserts, realizar un rollback y mostrar el mensaje de error
    if (isset($connection)) {
        $connection->EXEC("ROLLBACK;");
    }
    $msg = "Error: " . $e->getMessage();
    $message($msg);
    return false;
}



//insertar nuevos ids si son detectados en requisitos, se detectan por sus ids no son numericos
$id_requisitos_multi_todos = explode(",",$_REQUEST["valores_multi_requisitos_todos"]);

$id_valores_multi_habilidades_conocimiento_todos = explode(",",$_REQUEST["valores_multi_habilidades_conocimiento_todos"]);



$rray_nuevos_requisitos_id= [];

$rray_nuevos_habilidades_id= [];





//proceso de requisitos
	foreach ($id_requisitos_multi_todos as  $valuetoinsert)
      {

		if (!is_numeric($valuetoinsert)){

       $sqlinsert = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_requisitos_excluyentes(descripcion) values 
				(':1') ON CONFLICT ON CONSTRAINT vacancia_requisitos_excluyentes_descripcion_key DO UPDATE SET descripcion = excluded.descripcion  RETURNING id_requisitos_vacancia",$valuetoinsert);
				$rx=DB::Query($sqlinsert);
				$row = $rx->fetchAssoc(); 
				$new_id_requisitos_nuevos = $row['id_requisitos_vacancia'];
        array_push($rray_nuevos_requisitos_id, $new_id_requisitos_nuevos);

     }
			
     }

  //crear el array con los posibles id ya existentes

foreach ($id_requisitos_multi_todos as  $valuetoinsert)
      {

		if (is_numeric($valuetoinsert)){

       
       array_push($rray_nuevos_requisitos_id, $valuetoinsert);

     }
			
     }


//aqui empieza procesamiento de habilidades

foreach ($id_valores_multi_habilidades_conocimiento_todos as  $valuetoinsert2)
      {

		if (!is_numeric($valuetoinsert2)){

       $sqlinsert2 = DB::PrepareSQL("INSERT INTO bolsa_empleo.habilidades(descripcion) values 
				(':1') ON CONFLICT ON CONSTRAINT habilidades_descripcion_key DO UPDATE SET descripcion = excluded.descripcion  RETURNING id_habilidad",$valuetoinsert2);
				$rx2=DB::Query($sqlinsert2);
				$row2 = $rx2->fetchAssoc(); 
				$new_id_habilidades_nuevos = $row2['id_habilidad'];
       array_push($rray_nuevos_habilidades_id, $new_id_habilidades_nuevos);

     }
			
     }

  //crear el array con los posibles id ya existentes

foreach ($id_valores_multi_habilidades_conocimiento_todos as  $valuetoinsert3)
      {

		if (is_numeric($valuetoinsert3)){

       
       array_push($rray_nuevos_habilidades_id, $valuetoinsert3);

     }
			
     }




$values["fk_ocupacion_puesto"]= $_REQUEST["valores_multi_ocupacion_puesto_todos"]; 
$values["requisitos_exclu_formacion"]= implode(',', $rray_nuevos_requisitos_id); 

$values["habilidades_conocimiento"]= implode(',', $rray_nuevos_habilidades_id); 



$values["salario_final"] = str_replace('.', '', $values["salario_final"]);

$values["id_formacion_academica"]=ucfirst($values["id_formacion_academica"]);
$values["tipo_movilidad"]=ucfirst($values["tipo_movilidad"]);




$values["descripcion_puesto"]=ucfirst($values["descripcion_puesto"]);
$values["requisitos_exclu_formacion"]=ucfirst($values["requisitos_exclu_formacion"]);
$values["habilidades_conocimiento"]=ucfirst($values["habilidades_conocimiento"]);

return true;
;		
} // function BeforeAdd

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Custom add
function CustomAdd(&$values, &$keys, &$error, $inline, $pageObject)
{

		$userData = Security::currentUserData();
global $cman;

try {
    // Iniciar una transacción
    $connection = $cman->byName("myConn");

$connection->EXEC("START TRANSACTION;");
//// insertar vacancia 
$vacancia = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia
					(fecha_creacion_vacancia,
						id_estado_vacancia,
						fecha_expiracion_vacancia,
						cantidad_vacancia,fk_id_feria_empleo) 
					values (':1',':2',':3',':4',':5')RETURNING id_vacancias;",
					now(),
					2,
					$values["fecha_expiracion_vacancia"],
					$values["cantidad_vacancia"],
					$values["fk_id_feria_empleo"]);
$rx=DB::Query($vacancia);
if (!$rx) {
        throw new Exception("Error en la consulta de inserción de vacancia.");
    }
$row = $rx->fetchAssoc(); 
$new_id_vacancias = $row['id_vacancias'];
    // Insertar puesto
$puesto = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_puesto
					(fk_ocupacion_puesto,
						salario,
						tipo_contrato,
						descripcion_puesto,
						id_vacancia,
						id_rubro,
						anos_experiencia_vacancia,
						meses_experiencia_vacancia,
						horario_rotativo,
						modalidad_trabajo,
						descripcion_salario,
					tipo_remuneracion) 
					values (':1',':2',':3',':4',':5',':6',':7',':8',':9',':10',':11',':12')RETURNING id_puesto_vacancia;",
					$values["fk_ocupacion_puesto"],
					$values["salario_final"],
					$values["tipo_contrato"],
					$values["descripcion_puesto"],
				$new_id_vacancias,
					$values["id_rubro"],
					$values["anos_experiencia_vacancia"],
					$values["meses_experiencia_vacancia"],
					$values["horario_rotativo"],
					$values["modalidad_trabajo"],
					$values["salario_descripcion"],
					$values["tipo_remuneracion"]);

$rxpuesto=DB::Query($puesto);
if (!$rxpuesto) {
        throw new Exception("Error en la consulta de inserción de puesto.");
    }
$rowpuesto = $rxpuesto->fetchAssoc(); 
$new_id_puesto = $rowpuesto['id_puesto_vacancia'];
 // Insertar empresa
$empresa = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_empresa
					(id_empresa_sucursal,
					id_contacto_sucursal,
					id_cidudad,
					id_departamento,
					id_vacancia) 
					values (':1',':2',':3',':4',':5')RETURNING id_empresa_vacancia;",
					$values["id_empresa_sucursal"],
					$values["id_contacto_sucursal"],
					$values["id_cidudad"],
					$values["id_departamento"],
				$new_id_vacancias);
			$rxempresa=DB::Query($empresa);
 if (!$rxempresa) {
        throw new Exception("Error en la consulta de inserción de empresa.");
    }
$rowempresa = $rxempresa->fetchAssoc(); 
$new_id_empresa = $rowempresa['id_empresa_vacancia'];

/////insertar requisito
$requisitos = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_requisito
					(genero,
						movilidad_propia,
						tipo_movilidad,
						id_registro_conducir,
						discapacidad_aceptada,
						id_vacancia,
						nacionalidad,
						edad,
					requisitos_exclu_formacion,
					habilidades_conocimiento,
					id_formacion_academica) 
					values (':1',':2',':3',':4',':5',':6',':7',':8',':9',':10',':11')RETURNING id_vacancia_requisito;",
					$values["genero"],
					$values["movilidad_propia"],
					$values["tipo_movilidad"],
					$values["id_registro_conducir"],
					$values["discapacidad_aceptada"],
			$new_id_vacancias,
			$values["nacionalidad"],
					"[".$values["edad_rango_bajo"]."-".$values['edad_rango_alto']."]",		
				$values["requisitos_exclu_formacion"],
					$values["habilidades_conocimiento"],
					$values["id_formacion_academica"]);
					$rxx=DB::Query($requisitos);
					if (!$rxx) {
							  throw new Exception("Error en la consulta de inserción de requisitos.");
						 }
						$roww = $rxx->fetchAssoc(); 
						$new_id_vacancia_requisito = $roww['id_vacancia_requisito'];

    // Resto del código de inserción aquí...
 // Insertar en la tabla de detalles de movilidad
$tipo_movilidad = explode(",",$values["tipo_movilidad"]);


      foreach ($tipo_movilidad as  $value)
      {
$movilidad = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_detalle_movilidad
            (id_tipo_movilidad, id_vacancia_requisito, movilidad_propia) 
            VALUES (':1', ':2', ':3')",
            $value,
            $new_id_vacancia_requisito,
            $values["id_registro_conducir"],
            $values["movilidad_propia"]);
        $rx2 = DB::Query($movilidad);
        if (!$rx2) {
            throw new Exception("Error en la inserción de detalles de movilidad.");
        }

}
 // Insertar en la tabla de detalles de registro de conducir
$registro_conducir = explode(",",$values["id_registro_conducir"]);


      foreach ($registro_conducir as  $value_regi)
      {
$registro_conducir_vaca = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_detalle_registro_conducir
            (id_vacancia_requisitos, id_tipo_registro_conducir) 
            VALUES (':1', ':2')",
            $new_id_vacancia_requisito,
            $value_regi);
        $rx6 = DB::Query($registro_conducir_vaca);
        if (!$rx6) {
            throw new Exception("Error en la inserción de detalles de registro de conducir.");
        }
}
 // Insertar en la tabla vacancia_discapa_aceptada
$vacancia_discapa_aceptada = explode(",",$values["discapacidad_aceptada"]);


      foreach ($vacancia_discapa_aceptada as  $value1)
      {
 $discapacidad = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_discapa_aceptada
            (id_discapacidad_vacancia, id_vacancia_requisito) 
            VALUES (':1', ':2')",
            $value1,
            $new_id_vacancia_requisito);
						$rx1 = DB::Query($discapacidad);
       
        if (!$rx1) {
            throw new Exception("Error en la inserción de discapacidades aceptadas.");
        }

}

  // Insertar en la tabla de requisitos excluyentes de formación
$vacancia_requisito_excluyente_detalle = explode(",",$values["requisitos_exclu_formacion"]);


      foreach ($vacancia_requisito_excluyente_detalle as  $value4)
      {
$requisitos_exclu_formacion = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_requisito_excluyente_detalle
            (id_vacancia_requisito, id_requisito_excluyente) 
            VALUES (':1', ':2')",
            $new_id_vacancia_requisito,
            $value4);
        $rx3 = DB::Query($requisitos_exclu_formacion);
        if (!$rx3) {
            throw new Exception("Error en la inserción de requisitos excluyentes de formación.");
        }
}
   // Insertar en la tabla de habilidades y conocimientos
$vacancia_habilidad_conocimiento = explode(",",$values["habilidades_conocimiento"]);


      foreach ($vacancia_habilidad_conocimiento as  $value5)
      {
$habilidades_conocimiento = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_habilidad_conocimiento
            (id_habilidad, id_vacancia_requisito) 
            VALUES (':1', ':2')",
            $value5,
            $new_id_vacancia_requisito);
        $rx4 = DB::Query($habilidades_conocimiento);
        if (!$rx4) {
            throw new Exception("Error en la inserción de habilidades y conocimientos.");
        }
}

   // Insertar en la tabla de formación académica
$vacancia_formacion_academica_detalle = explode(",",$values["id_formacion_academica"]);

      foreach ($vacancia_formacion_academica_detalle as  $value6)
      {
$formacion_academica = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_formacion_academica_detalle
            (id_formacion_vacancia, id_vacancia_requisito) 
            VALUES (':1', ':2')",
            $value6,
            $new_id_vacancia_requisito);
        $rx5 = DB::Query($formacion_academica);
        if (!$rx5) {
            throw new Exception("Error en la inserción de formación académica.");
        }
}

// Insertar en la tabla de cambios de estado de la vacancia
$strSQLExistscambio = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_cambio_estado
					(id_vacancia,
						estado_vacancia,
						fecha_cambio,
						estado_anterior,
						usuario) 
					values (':1',':2',':3',':4',':5');",
						$new_id_vacancias,
					1,
					 now(),
					0,
					$userData["id"]);
			$rx7 = DB::Query($strSQLExistscambio);
    if (!$rx7) {
        throw new Exception("Error en la inserción de cambios de estado de la vacancia.");
    }
$connection->EXEC("COMMIT;");
    $msg1 = "Se Agrego la vacancia";
} catch (Exception $e) {
    // Si hay un error en alguno de los inserts, realizar un rollback y mostrar el mensaje de error
    $connection->EXEC("ROLLBACK;");
   $msg1 = "Error: " . $e->getMessage();
$auditoria = DB::PrepareSQL("INSERT INTO bolsa_empleo.auditoria_administrador_bolsa (tabla_afectada, operacion, usuario, detalles, direccion_ip)
        VALUES (':1', ':2', ':3', ':4', ':5')",'bolsa_empleo.vacancia', 'error', 	$userData["id"],
 $msg1,
 $_SERVER['REMOTE_ADDR']);
   DB::Exec($auditoria);

return false;

}
$_SESSION['postid_vacancias']=$new_id_vacancias ;
$pageObject->setMessage($msg1);

return false;
;		
} // function CustomAdd

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Before display
function BeforeShowAdd(&$xt, &$templatefile, $pageObject)
{

		
  
$pageObject->setProxyValue("vacancia_dias", $_SESSION["vacancia_dias"]);


;		
} // function BeforeShowAdd

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Before record updated
function BeforeEdit(&$values, &$sqlValues, $where, &$oldvalues, &$keys, &$message, $inline, $pageObject)
{

		//insertar nuevos ids si son detectados en requisitos, se detectan por sus ids no son numericos
$id_requisitos_multi_todos = explode(",",$_REQUEST["valores_multi_requisitos_todos"]);

$id_valores_multi_habilidades_conocimiento_todos = explode(",",$_REQUEST["valores_multi_habilidades_conocimiento_todos"]);



$rray_nuevos_requisitos_id= [];

$rray_nuevos_habilidades_id= [];



//proceso de requisitos
	foreach ($id_requisitos_multi_todos as  $valuetoinsert)
      {

		if (!is_numeric($valuetoinsert)){

       $sqlinsert = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_requisitos_excluyentes(descripcion) values 
				(':1') ON CONFLICT ON CONSTRAINT vacancia_requisitos_excluyentes_descripcion_key DO UPDATE SET descripcion = excluded.descripcion  RETURNING id_requisitos_vacancia",$valuetoinsert);
				$rx=DB::Query($sqlinsert);
				$row = $rx->fetchAssoc(); 
				$new_id_requisitos_nuevos = $row['id_requisitos_vacancia'];
        array_push($rray_nuevos_requisitos_id, $new_id_requisitos_nuevos);

     }
			
     }

  //crear el array con los posibles id ya existentes

foreach ($id_requisitos_multi_todos as  $valuetoinsert)
      {

		if (is_numeric($valuetoinsert)){

       
       array_push($rray_nuevos_requisitos_id, $valuetoinsert);

     }
			
     }


//aqui empieza procesamiento de habilidades

foreach ($id_valores_multi_habilidades_conocimiento_todos as  $valuetoinsert2)
      {

		if (!is_numeric($valuetoinsert2)){

       $sqlinsert2 = DB::PrepareSQL("INSERT INTO bolsa_empleo.habilidades(descripcion) values 
				(':1') ON CONFLICT ON CONSTRAINT habilidades_descripcion_key DO UPDATE SET descripcion = excluded.descripcion  RETURNING id_habilidad",$valuetoinsert2);
				$rx2=DB::Query($sqlinsert2);
				$row2 = $rx2->fetchAssoc(); 
				$new_id_habilidades_nuevos = $row2['id_habilidad'];
       array_push($rray_nuevos_habilidades_id, $new_id_habilidades_nuevos);

     }
			
     }

  //crear el array con los posibles id ya existentes

foreach ($id_valores_multi_habilidades_conocimiento_todos as  $valuetoinsert3)
      {

		if (is_numeric($valuetoinsert3)){

       
       array_push($rray_nuevos_habilidades_id, $valuetoinsert3);

     }
			
     }




$values["fk_ocupacion_puesto"]= $_REQUEST["valores_multi_ocupacion_puesto_todos"]; 
$values["requisitos_exclu_formacion"]= implode(',', $rray_nuevos_requisitos_id); 

$values["habilidades_conocimiento"]= implode(',', $rray_nuevos_habilidades_id); 

$values["salario_final"] = str_replace('.', '', $values["salario_final"]);

$values["id_formacion_academica"]=ucfirst($values["id_formacion_academica"]);
$values["tipo_movilidad"]=ucfirst($values["tipo_movilidad"]);
$values["descripcion_puesto"]=ucfirst($values["descripcion_puesto"]);
$values["requisitos_exclu_formacion"]=ucfirst($values["requisitos_exclu_formacion"]);
$values["habilidades_conocimiento"]=ucfirst($values["habilidades_conocimiento"]);

return true;
;		
} // function BeforeEdit

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Custom record update
function CustomEdit(&$values, $where, &$oldvalues, &$keys, &$error, $inline, $pageObject)
{

		
$userData = Security::currentUserData();

$vacancia = DB::PrepareSQL("update bolsa_empleo.vacancia 
set 	fecha_expiracion_vacancia= ':1',
						cantidad_vacancia= ':2'
	where id_vacancias = ':3'",
					$values["fecha_expiracion_vacancia"],
					$values["cantidad_vacancia"], 
						$values["id_vacancias"]);

DB::Exec($vacancia);
$_SESSION['postid_vacancias']=	$values["id_vacancias"];
$puesto = DB::PrepareSQL("update bolsa_empleo.vacancia_puesto 
set 
fk_ocupacion_puesto = ':1',
salario = ':2',
tipo_contrato = ':3',
 descripcion_puesto = ':4',
 id_rubro = ':5',
 anos_experiencia_vacancia = ':6',
 meses_experiencia_vacancia = ':7',
horario_rotativo= ':8',
modalidad_trabajo= ':9',
descripcion_salario= ':10',
tipo_remuneracion=':11'
 where id_vacancia = ':12'",
					$values["fk_ocupacion_puesto"],
					$values["salario_final"],
					$values["tipo_contrato"],
					$values["descripcion_puesto"],
					$values["id_rubro"],
					$values["anos_experiencia_vacancia"],
					$values["meses_experiencia_vacancia"],
					$values["horario_rotativo"],
					$values["modalidad_trabajo"],
					$values["salario_descripcion"],
					$values["tipo_remuneracion"],
					$values["id_vacancias"]);

DB::Exec($puesto);

$empresa = DB::PrepareSQL("update bolsa_empleo.vacancia_empresa 
set 
id_empresa_sucursal = ':1',
id_contacto_sucursal = ':2',
id_cidudad = ':3',
 id_departamento = ':4' 
where id_vacancia = ':5'",
				$values["id_empresa_sucursal"],
					$values["id_contacto_sucursal"],
					$values["id_cidudad"],
					$values["id_departamento"],
				$values["id_vacancias"]);

DB::Exec($empresa);






$vacancia_requisito = DB::PrepareSQL("update bolsa_empleo.vacancia_requisito 
set genero = ':1',
movilidad_propia = ':2',
tipo_movilidad	= ':3', 
id_registro_conducir = ':4', 
discapacidad_aceptada = ':5', 
nacionalidad = ':6', 
edad = ':7', 
requisitos_exclu_formacion = ':8', 
habilidades_conocimiento = ':9',
id_formacion_academica = ':10' 
where id_vacancia = ':11'",
					$values["genero"],
					$values["movilidad_propia"],
					$values["tipo_movilidad"],
					$values["id_registro_conducir"],
					$values["discapacidad_aceptada"],
					$values["nacionalidad"],
					"[".$values["edad_rango_bajo"]."-".$values['edad_rango_alto']."]",		
					$values["requisitos_exclu_formacion"],
					$values["habilidades_conocimiento"],
					$values["id_formacion_academica"],
					$values["id_vacancias"]
	);

DB::Exec($vacancia_requisito);



$consulta_requisitos = DB::PrepareSQL("SELECT
bolsa_empleo.vacancia_requisito.id_vacancia_requisito
FROM
bolsa_empleo.vacancia_requisito
WHERE
bolsa_empleo.vacancia_requisito.id_vacancia =  ':1' limit 1", 		$values["id_vacancias"] );
$consulta_requi_eli1 = DB::Query($consulta_requisitos);
$consulta_requi_eli=$consulta_requi_eli1->fetchAssoc();

$eliminar_discapa = DB::PrepareSQL("delete from bolsa_empleo.vacancia_discapa_aceptada
 where bolsa_empleo.vacancia_discapa_aceptada.id_vacancia_requisito =':1'",
$consulta_requi_eli['id_vacancia_requisito']);
									DB::Exec($eliminar_discapa);



$eliminar_requisito = DB::PrepareSQL("delete from bolsa_empleo.vacancia_requisito_excluyente_detalle
 where bolsa_empleo.vacancia_requisito_excluyente_detalle.id_vacancia_requisito =':1'",
$consulta_requi_eli['id_vacancia_requisito']);
									DB::Exec($eliminar_requisito);


$eliminar_habilidad = DB::PrepareSQL("delete from bolsa_empleo.vacancia_habilidad_conocimiento
 where bolsa_empleo.vacancia_habilidad_conocimiento.id_vacancia_requisito =':1'",
$consulta_requi_eli['id_vacancia_requisito']);
									DB::Exec($eliminar_habilidad);

$eliminar_vacancia_detalle_movilidad = DB::PrepareSQL("delete from bolsa_empleo.vacancia_detalle_movilidad
 where bolsa_empleo.vacancia_detalle_movilidad.id_vacancia_requisito =':1'",
$consulta_requi_eli['id_vacancia_requisito']);
									DB::Exec($eliminar_vacancia_detalle_movilidad);





$eliminar_vacancia_detalle_registro_conducir= DB::PrepareSQL("delete from bolsa_empleo.vacancia_detalle_registro_conducir
 where  bolsa_empleo.vacancia_detalle_registro_conducir.id_vacancia_requisitos=':1'",
$consulta_requi_eli['id_vacancia_requisito']);
									DB::Exec($eliminar_vacancia_detalle_registro_conducir);

$eliminar_vacancia_formacion_academica_detalle= DB::PrepareSQL("delete from bolsa_empleo.vacancia_formacion_academica_detalle
 where bolsa_empleo.vacancia_formacion_academica_detalle.id_vacancia_requisito =':1'",$consulta_requi_eli['id_vacancia_requisito']);
									DB::Exec($eliminar_vacancia_formacion_academica_detalle);


$vacancia_discapa_aceptada = explode(",",$values["discapacidad_aceptada"]);


      foreach ($vacancia_discapa_aceptada as  $value1)
      {
$discapacidad = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_discapa_aceptada
					(id_discapacidad_vacancia,
						id_vacancia_requisito) 
					values (':1',':2')",
					$value1,
					$consulta_requi_eli['id_vacancia_requisito']);
					DB::Exec($discapacidad); 
}



$tipo_movilidad = explode(",",$values["tipo_movilidad"]);


      foreach ($tipo_movilidad as  $value)
      {
$movilidad = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_detalle_movilidad
					(id_tipo_movilidad,
					id_vacancia_requisito,
					id_registro_de_conducir,
					movilidad_propia) 
					values (':1',':2',':3',':4')",
					$value,
					$new_id_vacancia_requisito,
					$values["id_registro_conducir"],
					$values["movilidad_propia"]);
					DB::Exec($movilidad); 
}





$vacancia_requisito_excluyente_detalle = explode(",",$values["requisitos_exclu_formacion"]);


      foreach ($vacancia_requisito_excluyente_detalle as  $value4)
      {
$requisitos_exclu_formacion = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_requisito_excluyente_detalle
					(id_vacancia_requisito,
						id_requisito_excluyente) 
					values (':1',':2')",
				$consulta_requi_eli['id_vacancia_requisito'],
						$value4);
					DB::Exec($requisitos_exclu_formacion); 
}

$vacancia_habilidad_conocimiento = explode(",",$values["habilidades_conocimiento"]);


      foreach ($vacancia_habilidad_conocimiento as  $value5)
      {
$habilidades_conocimiento = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_habilidad_conocimiento
					(	id_habilidad,
						id_vacancia_requisito
					) 
					values (':1',':2')",
					$value5,$consulta_requi_eli['id_vacancia_requisito']);
					DB::Exec($habilidades_conocimiento); 
}




$vacancia_formacion_academica_detalle = explode(",",$values["id_formacion_academica"]);


      foreach ($vacancia_formacion_academica_detalle as  $value6)
      {
$formacion_academica = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_formacion_academica_detalle
					(id_formacion_vacancia,
						id_vacancia_requisito) 
					values (':1',':2')",
					$value6,
					$consulta_requi_eli['id_vacancia_requisito']);
					DB::Exec($formacion_academica); 
}




$registro_conducir = explode(",",$values["id_registro_conducir"]);


      foreach ($registro_conducir as  $value_regi)
      {
$registro_conducir_vaca = DB::PrepareSQL("INSERT INTO bolsa_empleo.vacancia_detalle_registro_conducir
					(id_vacancia_requisitos,
						id_tipo_registro_conducir) 
					values (':1',':2')",
					$consulta_requi_eli['id_vacancia_requisito'],
					$value_regi
					);
					DB::Exec($registro_conducir_vaca); 
}


$consulta_audit = DB::PrepareSQL("SELECT
bolsa_empleo.vacancia.id_vacancias,
bolsa_empleo.vacancia_puesto.id_puesto_vacancia,
bolsa_empleo.vacancia_empresa.id_empresa_vacancia,
bolsa_empleo.vacancia_requisito.id_vacancia_requisito
FROM
bolsa_empleo.vacancia
INNER JOIN bolsa_empleo.vacancia_empresa ON bolsa_empleo.vacancia_empresa.id_vacancia = bolsa_empleo.vacancia.id_vacancias
INNER JOIN bolsa_empleo.vacancia_puesto ON bolsa_empleo.vacancia_puesto.id_vacancia = bolsa_empleo.vacancia.id_vacancias
INNER JOIN bolsa_empleo.vacancia_requisito ON bolsa_empleo.vacancia_requisito.id_vacancia = bolsa_empleo.vacancia.id_vacancias
where bolsa_empleo.vacancia.id_vacancias=':1' limit 1",$values["id_vacancias"] );
$consulta_audit_now = DB::Query($consulta_audit);
$consulta_audit_resul=$consulta_audit_now->fetchAssoc();



$auditoria = DB::PrepareSQL("INSERT INTO bolsa_empleo.auditoria_administrador_bolsa (tabla_afectada, operacion, usuario, detalles, direccion_ip)
        VALUES (':1', ':2', ':3', ':4', ':5')",'bolsa_empleo.vacancia', 'edit', 
	$userData["id"], "id_vacancia:'".$consulta_audit_resul["id_vacancias"]."'||id_puesto_vacancia:'".$consulta_audit_resul["id_puesto_vacancia"]."'||id_empresa_vacancia:'".$consulta_audit_resul["id_empresa_vacancia"]."'
||id_vacancia_requisito:'". $consulta_audit_resul["id_vacancia_requisito"]."'||id_registro_conducir:'". $values["id_registro_conducir"]."'
||id_formacion_academica:'". $values["id_formacion_academica"]."'||habilidades_conocimiento:'". $values["habilidades_conocimiento"]."'
||requisitos_exclu_formacion:'". $values["requisitos_exclu_formacion"]."'||tipo_movilidad:'". $values["tipo_movilidad"]."'
||discapacidad_aceptada:'". $values["discapacidad_aceptada"]."'",
 $_SERVER['REMOTE_ADDR']);
   DB::Exec($auditoria);
return false;
;		
} // function CustomEdit

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Process record values
function ProcessValuesEdit(&$values, $pageObject)
{

		

$_SESSION['postid_vacancias']=$values['id_vacancias'] ;

 $strSQLExists5 = DB::PrepareSQL("
SELECT
bolsa_empleo.vista_edades_desglosado.fk_ocupacion_puesto,
bolsa_empleo.vista_edades_desglosado.descripcion_salario,
bolsa_empleo.vista_edades_desglosado.salario,
bolsa_empleo.vista_edades_desglosado.edad_minimo,
bolsa_empleo.vista_edades_desglosado.edad_maximo,
bolsa_empleo.vista_edades_desglosado.id_vacancias,
bolsa_empleo.vista_edades_desglosado.horario_rotativo,
	bolsa_empleo.vista_edades_desglosado.tipo_remuneracion
FROM
bolsa_empleo.vista_edades_desglosado

where bolsa_empleo.vista_edades_desglosado.id_vacancias= ':1' LIMIT 1",
    $values['id_vacancias']
);
$rsExists5 = DB::Query($strSQLExists5);
$data5 = db_fetch_array($rsExists5);

if($data5['horario_rotativo']=='t'){
$_SESSION['horario_rotativo']=true;

}
if($data5['horario_rotativo']=='f'){
$_SESSION['horario_rotativo']=false;

}
$values['horario_rotativo']=$_SESSION['horario_rotativo'];


$_SESSION['salario_descripcion']=$data5['descripcion_salario'] ;
$_SESSION['salario']=$data5['salario'] ;
$_SESSION['edad_minimo']=$data5['edad_minimo'] ;
$_SESSION['edad_maximo']=$data5['edad_maximo'] ;
$_SESSION['tipo_remuneracion']=$data5['tipo_remuneracion'] ;

$values['tipo_remuneracion']=$_SESSION['tipo_remuneracion'];
$values['salario_descripcion']=$_SESSION['salario_descripcion'];
$values['salario_final']=$_SESSION['salario'];
$values['edad_rango_bajo']=$_SESSION['edad_minimo'];
$values['edad_rango_alto']=$_SESSION['edad_maximo'];
$pageObject->setProxyValue("edad_rango_bajo1", $_SESSION['edad_minimo']);
$pageObject->setProxyValue("edad_rango_alto1", $_SESSION['edad_maximo']);
// Place event code here.
// Use "Add Action" button to add code snippets.
;		
} // function ProcessValuesEdit

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Before display
function BeforeShowEdit(&$xt, &$templatefile, $values, $pageObject)
{

		

$pageObject->hideItem("integrated_edit_field6");

// Place event code here.
// Use "Add Action" button to add code snippets.
;		
} // function BeforeShowEdit

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// List page: After record processed
function BeforeMoveNextList(&$data, &$row, &$record, $recordId, $pageObject)
{

		$pageObject->hideItem("custom_button1", $recordId); //desbilitar boton cerrar
$pageObject->hideItem("custom_button", $recordId); //desbilitar boton activar
$pageObject->hideItem("grid_details_link", $recordId); 
$pageObject->hideItem("text4", $recordId); 

$now = date("Y-m-d H:i:s");
//estan desactvado ambo sbotones
if ($data["fecha_expiracion_vacancia"] < $now && ($data["id_estado_vacancia"] == 5 || $data["id_estado_vacancia"] == 1)) {
	$pageObject->hideItem("custom_button1", $recordId); //desbilitar boton cerrar
	$pageObject->hideItem("custom_button", $recordId);
}

// para activar boton
if ($data["fecha_expiracion_vacancia"] > $now && ($data["id_estado_vacancia"] == 5 || $data["id_estado_vacancia"] == 1)) {
	$pageObject->hideItem("custom_button1", $recordId); //desbilitar boton cerrar
	$pageObject->showItem("custom_button", $recordId); //habiliotar boton activar boton cerrar
}

// para cerrar boton
if ($data["fecha_expiracion_vacancia"] > $now && $data["id_estado_vacancia"] == 2) {
	$pageObject->showItem("custom_button1", $recordId); //habilitar boton cerrar boton cerrar
	$pageObject->hideItem("custom_button", $recordId); //desbilitar boton activar
}

$strSQLExists5 = DB::PrepareSQL("SELECT bolsa_empleo.postulacion.id_vacancia,
																							bolsa_empleo.postulacion.id_postulacion,
																							bolsa_empleo.postulacion.id_estado,
																							bolsa_empleo.postulacion.fecha_postulacion,
																							bolsa_empleo.postulacion.fk_personaid
																			FROM bolsa_empleo.postulacion
																			WHERE bolsa_empleo.postulacion.id_vacancia = '" . $data["id_vacancias"] . "'");
$rsExists5 = DB::Query($strSQLExists5);
$data5 = $rsExists5->fetchAssoc();  

if (!$data5){
	$pageObject->hideItem("grid_details_link", $recordId); 
	$pageObject->showItem("text4", $recordId); 
} else {
	$pageObject->showItem("grid_details_link", $recordId); 
	$pageObject->hideItem("text4", $recordId);
}

;		
} // function BeforeMoveNextList

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Before display
function BeforeShowList(&$xt, &$templatefile, $pageObject)
{

		$xt->assign("message", '<div><h3><b><td>No hay ninguna oferta laboral pendiente.</h3></b></td></div>');

;		
} // function BeforeShowList

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		



}
?>
